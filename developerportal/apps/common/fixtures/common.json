[
  {
    "model": "articles.articletopic",
    "pk": 1,
    "fields": {
      "sort_order": 0,
      "article": 8,
      "topic": 7
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 2,
    "fields": {
      "sort_order": 1,
      "article": 8,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 3,
    "fields": {
      "sort_order": 0,
      "article": 12,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 4,
    "fields": {
      "sort_order": 0,
      "article": 13,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 5,
    "fields": {
      "sort_order": 0,
      "article": 14,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 6,
    "fields": {
      "sort_order": 0,
      "article": 15,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 7,
    "fields": {
      "sort_order": 0,
      "article": 16,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 8,
    "fields": {
      "sort_order": 0,
      "article": 17,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 9,
    "fields": {
      "sort_order": 0,
      "article": 18,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 10,
    "fields": {
      "sort_order": 0,
      "article": 19,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 11,
    "fields": {
      "sort_order": 0,
      "article": 20,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 12,
    "fields": {
      "sort_order": 0,
      "article": 21,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 13,
    "fields": {
      "sort_order": 0,
      "article": 22,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 14,
    "fields": {
      "sort_order": 0,
      "article": 23,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 15,
    "fields": {
      "sort_order": 0,
      "article": 24,
      "topic": 7
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 16,
    "fields": {
      "sort_order": 0,
      "article": 25,
      "topic": 7
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 17,
    "fields": {
      "sort_order": 0,
      "article": 26,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 18,
    "fields": {
      "sort_order": 0,
      "article": 27,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 19,
    "fields": {
      "sort_order": 0,
      "article": 28,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 20,
    "fields": {
      "sort_order": 0,
      "article": 29,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 21,
    "fields": {
      "sort_order": 0,
      "article": 30,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 22,
    "fields": {
      "sort_order": 0,
      "article": 31,
      "topic": 6
    }
  },
  {
    "model": "articles.articletopic",
    "pk": 23,
    "fields": {
      "sort_order": 0,
      "article": 32,
      "topic": 6
    }
  },
  {
    "model": "articles.article",
    "pk": 8,
    "fields": {
      "description": "Script debugging is one of the most powerful and complex productivity features in the web developer toolbox. Done right, it empowers  developers to fix bugs quickly and efficiently. So the question for us,  the Firefox DevTools team, has been, are the Firefox DevTools doing it right?",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>We\\u2019ve been listening to feedback from our community. Above everything we heard the need for greater <b>reliability</b> and <b>performance</b>;  especially with modern web apps. Moreover, script debugging is a  hard-to-learn skill that should work in similar fashion across browsers,  but isn\\u2019t consistent because of feature and UI gaps.</p><p>With these pain points in mind, the DevTools Debugger team \\u2013 with help from our tireless <a href=\\\"https://devtools-html-slack.herokuapp.com/\\\">developer community</a>  \\u2013 landed countless updates to design a more productive debugging  experience. The work is ongoing, but Firefox 67 marks an important  milestone, and we wanted to highlight some of the fantastic improvements  and features. We invite you to <a href=\\\"https://www.mozilla.org/en-US/firefox/developer/\\\">open up Firefox Quantum: Developer Edition</a>, try out the debugger on the examples below and your projects and let us know if you notice the difference.</p><h2>A rock-solid debugging experience</h2><p>Fast and reliable debugging is the result of many smaller  interactions. From initial loading and source mapping to breakpoints,  console logging, and variable previews, everything needs to <i>feel</i> solid and responsive. The debugger should be consistent, predictable, and capable of understanding common tools like <a href=\\\"https://webpack.js.org/\\\">webpack</a>, <a href=\\\"https://babeljs.io/\\\">Babel</a>, and <a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a>.</p><p>We can proudly say that <i>all</i> of those areas have improved in the past months:</p><ol><li><b>Faster load time</b>. We\\u2019ve eliminated the worst performance cliffs that made the debugger slow to open. This has resulted in a 30% speedup in our <a href=\\\"https://firefox-dev.tools/performance-dashboard/tools/debugger.html?days=90&amp;filterstddev=true&amp;ignoreFlags=true\\\">performance test suite</a>. We\\u2019ll share more of our performance adventures in a future post.</li><li><b>Excellent source map support.</b> A revamped and <a href=\\\"https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/\\\">faster</a> source-map backend perfects the illusion that you\\u2019re debugging <i>your</i> code, not the compiled output from <i>Babel</i>, <i>Webpack</i>, <i>TypeScript</i>, <i>vue.js</i>, etc.<br/> Generating correct source maps can be challenging, so we also contributed patches to build tools (i.e. <a href=\\\"https://github.com/babel/babel/pull/8380\\\">babel</a>, <a href=\\\"https://github.com/vuejs/vue-loader/issues/1163#issuecomment-384712864\\\">vue</a>.<a href=\\\"https://github.com/babel/babel/issues/7632\\\">js</a>, <a href=\\\"https://github.com/facebook/regenerator/issues/342\\\">regenerator</a>) \\u2013 benefiting the whole ecosystem.</li><li><b>Reduced overhead when debugger isn\\u2019t focused.</b> No need to  worry any longer about keeping the DevTools open! We found and removed  many expensive calculations from running in the debugger when it\\u2019s in  the background.</li><li><b>Predictable breakpoints, pausing, and stepping.</b> We fixed many  long-standing bugs deep in the debugger architecture, solving some of  the most common and frustrating issues related to lost breakpoints,  pausing in the wrong script, or stepping through pretty-printed code.</li><li><b>Faster variable preview.</b> Thanks to our faster source-map  support (and lots of additional work), previews are now displayed much  more quickly when you hover your mouse over a variable while execution  is paused.</li></ol><p>These are just a handful of highlights. We\\u2019ve also resolved countless <a href=\\\"https://github.com/firefox-devtools/debugger/issues?q=is%3Aissue+is%3Aclosed+label%3A%22%3Abug%3A+bug%22\\\">bugs</a> and <a href=\\\"https://github.com/firefox-devtools/debugger/issues?q=is%3Aissue+is%3Aclosed+label%3A%22%3Awave%3A+polish%22\\\">polish</a> issues.</p><h3>Looking ahead</h3><p>Foremost, we must maintain a high standard of quality, which we\\u2019ll  accomplish by explicitly setting aside time for polish in our planning.  Guided by user feedback, we intend to use this time to improve new and  existing features alike.</p><p>Second, continued investment in our <a href=\\\"https://firefox-dev.tools/performance-dashboard/\\\">performance</a> and <a href=\\\"https://github.com/firefox-devtools/debugger/tree/master/src/workers/parser/tests/fixtures/frameworks\\\">correctness</a>  tests ensures that the ever-changing JavaScript ecosystem, including a  wide variety of frameworks and compiled languages, is well supported by  our tools.</p><h2>Debug all the things with new features</h2><p>Finding and pausing in just the right location can be key to  understanding a bug. This should feel effortless, so we\\u2019ve scrutinized  our own tools\\u2014and studied others\\u2014to give you the best possible  experience.</p><h3>Inline breakpoints for fine-grained pausing and stepping</h3>\", \"id\": \"1f62abe6-85a0-42b2-8b35-e56a3ff7fd82\"}, {\"type\": \"paragraph\", \"value\": \"<p>Why should breakpoints operate on lines, when lines can have multiple  statements? Thanks to inline breakpoints, it\\u2019s now easier than ever to  debug minified scripts, arrow functions, and chained method calls. Learn  more about <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_breakpoint\\\">breakpoints on MDN</a> or <a href=\\\"https://firefox-devtools-example-babel-typescript.glitch.me/\\\">try out the demo</a>.</p><h3>Logpoints combine the power of Console and Debugger</h3>\", \"id\": \"c81cc730-23e2-4460-9d9c-a7c618fc6bcf\"}, {\"type\": \"paragraph\", \"value\": \"<p>Console logging, also called <code>printf() debugging</code>, is a  quick and easy way to observe your program\\u2019s flow, but it rapidly  becomes tedious. Logpoints break that tiresome edit-build-refresh cycle  by dynamically injecting <code>console.log()</code> statements into your  running application. You can stay in the browser and monitor variables  without pausing or editing any code. Learn more about <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/Set_a_log_point\\\">log points on MDN</a>.</p><h3>Seamless debugging for JavaScript Workers</h3>\", \"id\": \"262635c1-caf4-4d17-8f4a-a5cc0cf74f06\"}, {\"type\": \"paragraph\", \"value\": \"<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\\\">Web Workers</a> power the modern web and need to be first-class concepts in DevTools. Using the new <i>Threads</i>  panel, you can switch between and independently pause different  execution contexts. This allows workers and their scripts to be debugged  within the same Debugger panel, similarly to other modern browsers.  Learn more about <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Debugger\\\">Worker debugging on MDN</a>.</p><h3>Human-friendly variable names for source maps</h3><p>Debugging bundled and compressed code isn\\u2019t easy. The <a href=\\\"https://github.com/mozilla/source-map\\\">Source Maps</a>  project, started and maintained by Firefox, bridges the gap between  minified code running in the browser and its original, human-friendly  version, but the translation isn\\u2019t perfect. Often, bits of the minified  build output shine through and break the illusion. We can do better!</p>\", \"id\": \"0ccb29df-9cdc-4e2e-967c-56b9fa603370\"}, {\"type\": \"paragraph\", \"value\": \"<p>By combining source maps with the <a href=\\\"https://babeljs.io/docs/en/babel-parser\\\">Babel parser</a>,  Firefox\\u2019s Debugger can now preview the original variables you care  about, and hide the extraneous cruft from compilers and bundlers. This  can even work in the console, automatically resolving human-friendly  identifiers to their actual, minified names behind the scenes. Due to  its performance overhead, you have to <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/Using_the_Debugger_map_scopes_feature\\\">enable this feature</a> separately by clicking the \\u201cMap\\u201d checkbox in the Debugger\\u2019s <i>Scopes</i> panel. Read the MDN documentation on <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/Using_the_Debugger_map_scopes_feature\\\">using the map scopes feature</a>.</p><h3>What\\u2019s next</h3><p>Developers frequently need to switch between browsers to ensure that  the web works for everyone, and we want our DevTools to be an intuitive,  seamless experience. Though browsers have converged on the same broad  organization for tools, we know there are still gaps in both features  and UI. To help us address those gaps, please <a href=\\\"https://bugzilla.mozilla.org/enter_bug.cgi?product=DevTools&amp;component=Debugger\\\">let us know</a> where you experience friction when switching browsers in your daily work.</p><h2>Your input makes a big difference</h2><p>As always, we would love to hear your feedback on how we can improve DevTools and the browser.</p><ul><li>File bug reports in <a href=\\\"https://bugzilla.mozilla.org/enter_bug.cgi?product=DevTools&amp;component=General\\\">here in Bugzilla</a></li><li>Chat with us in the <a href=\\\"https://devtools-html-slack.herokuapp.com/\\\">Firefox DevTools Slack</a></li><li>Share ideas and questions in Mozilla\\u2019s <a href=\\\"https://discourse.mozilla.org/c/devtools\\\">Developer Tools Discourse</a></li><li>Tweet us at <a href=\\\"https://twitter.com/FirefoxDevTools\\\">@FirefoxDevTools</a></li></ul><p>While all these updates will be ready to try out in Firefox 67, when  it\\u2019s released next week, we\\u2019ve polished them to perfection in Firefox 68  and added a few more goodies. Download <a href=\\\"https://www.mozilla.org/en-US/firefox/developer/\\\">Firefox Developer Edition (68)</a> to try the latest updates for devtools and platform now.</p>\", \"id\": \"d4148106-e0da-46c3-bd71-9525523fb7d2\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 12,
    "fields": {
      "description": "Mozilla Developer Roadshow is a meetup-style, Mozilla-focused event series for people who build the web. In 2017, the Roadshow reached more than 50 cities around the world. We shared highlights of the latest and greatest Mozilla and Firefox technologies. Now, we\u2019re back to tell the story of how the web continues to democratize opportunities for developers and digital creators.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h2>New events in New York and Los Angeles</h2><p>To open our 2019 series, Mozilla presents two events with VR visionary <a href=\\\"https://twitter.com/ImmersiveJourno\\\">Nonny de la Pe\\u00f1a</a> and the <a href=\\\"http://emblematicgroup.com/\\\">Emblematic Group</a> in Los Angeles (April 23) and in New York (May 20-23). de la Pe\\u00f1a\\u2019s pioneering work in virtual reality, widely credited with helping create the genre of immersive journalism, has been featured in Wired, Inc., The New York Times, and on the cover of The Wall Street Journal. Emblematic will present their latest project, <a href=\\\"https://www.reach.love/\\\">REACH in WebVR</a>. Their presentation will include a short demo of their product. During the social hour, the team will be available to answer questions and share their learnings and challenges of developing for the web.</p><p>Funding and resource scarcity continue to be key obstacles in helping the creative community turn their ideas into viable products. Within the realm of cutting edge emerging technologies, such as mixed reality, it\\u2019s especially challenging for women. Because women <a href=\\\"http://fortune.com/2019/01/28/funding-female-founders-2018/\\\">receive less than 2% of total venture funding</a>, the open distribution model of the web becomes a viable and affordable option to build, test, and deploy their projects.</p><h2>Upcoming DevRoadshow events</h2><p>The DevRoadshow continues on the road with eight more upcoming sessions in Europe and the Asia Pacific regions throughout 2019. Locations and dates will be announced soon. We\\u2019re eager to invite coders and creators around the world to join us this year. The Mozilla Dev Roadshow is a great way to make new friends and stay up to date on new products. Come learn about services and opportunities that extend the power of the web as the most accessible and inclusive platform for immersive experiences.</p><p>Check back to this post for updates, visit our <a href=\\\"http://mzl.la/devroadshow2019\\\">DevRoadshow</a> site for up to date registration opportunities, and follow along our journey on <a href=\\\"https://twitter.com/mozhacks\\\">@mozhacks</a> or sign up for the weekly Mozilla Developer Newsletter. We\\u2019ll keep you posted!</p>\", \"id\": \"a8d7c715-e352-496d-8d17-5f6eb004d465\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 13,
    "fields": {
      "description": "Today, we announce the start of a new standardization effort\u200a\u2014\u200aWASI, the WebAssembly system interface.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p><b>Why:</b> Developers are starting to push WebAssembly beyond the browser, because it provides a fast, scalable, secure way to run the same code across all machines.</p><p>But we don\\u2019t yet have a solid foundation to build upon. Code outside of a browser needs a way to talk to the system\\u200a\\u2014\\u200aa system interface. And the WebAssembly platform doesn\\u2019t have that yet.</p><p><b>What:</b> WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures.</p><p>Just as WebAssembly is an assembly language for a conceptual machine, WebAssembly needs a system interface for a conceptual operating system, not any single operating system. This way, it can be run across all different OSs.</p><p>This is what WASI is\\u200a\\u2014\\u200aa system interface for the WebAssembly platform.</p><p>We aim to create a system interface that will be a true companion to WebAssembly and last the test of time. This means upholding the key principles of WebAssembly\\u200a\\u2014\\u200aportability and security.</p><p><b>Who:</b> We are chartering a WebAssembly subgroup to focus on standardizing <a href=\\\"https://wasi.dev/\\\">WASI</a>. We\\u2019ve already gathered interested partners, and are looking for more to join.</p><p>Here are some of the reasons that we, our partners, and our supporters think this is important:</p><h4>Sean White, Chief R&amp;D Officer of Mozilla</h4><p>\\u201cWebAssembly is already transforming the way the web brings new kinds of compelling content to people and empowers developers and creators to do their best work on the web. Up to now that\\u2019s been through browsers, but with WASI we can deliver the benefits of WebAssembly and the web to more users, more places, on more devices, and as part of more experiences.\\u201d</p><h4>Tyler McMullen, CTO of\\u00a0Fastly</h4><p>\\u201cWe are taking WebAssembly beyond the browser, as a platform for fast, safe execution of code in our edge cloud. Despite the differences in environment between our edge and browsers, WASI means WebAssembly developers won\\u2019t have to port their code to each different platform.\\u201d</p><h4>Myles Borins, Node Technical Steering committee director</h4><p>\\u201cWebAssembly could solve one of the biggest problems in Node\\u200a\\u2014\\u200ahow to get close-to-native speeds and reuse code written in other languages like C and C++ like you can with native modules, while still remaining portable and secure. Standardizing this system interface is the first step towards making that happen.\\u201d</p><h4>Laurie Voss, co-founder of\\u00a0npm</h4><p>\\u201cnpm is tremendously excited by the potential WebAssembly holds to expand the capabilities of the npm ecosystem while hugely simplifying the process of getting native code to run in server-side JavaScript applications. We look forward to the results of this process.\\u201d</p><p>So that\\u2019s the big news! \\ud83c\\udf89</p><p>There are currently 3 implementations of WASI:</p><ul><li><a href=\\\"https://github.com/CraneStation/wasmtime\\\">wasmtime</a>, Mozilla\\u2019s WebAssembly runtime</li><li><a href=\\\"https://www.fastly.com/blog/announcing-lucet-fastly-native-webassembly-compiler-runtime\\\">Lucet</a>, Fastly\\u2019s WebAssembly runtime</li><li><a href=\\\"https://wasi.dev/polyfill/\\\">a browser polyfill</a></li></ul><p>You can see WASI in action in this video:</p>\", \"id\": \"3160eb6e-8dd2-48f0-9ca1-0e24cda0463c\"}, {\"type\": \"paragraph\", \"value\": \"<p>And if you want to learn more about our proposal for how this system interface should work, keep reading.</p><h3>What\\u2019s a system interface?</h3><p>Many people talk about languages like C giving you direct access to system resources. But that\\u2019s not <i>quite</i> true<i>.</i></p><p>These languages don\\u2019t have direct access to do things like open or create files on most systems. Why not?</p><p>Because these system resources\\u200a\\u2014\\u200asuch as files, memory, and network connections\\u2014 are too important for stability and security.</p><p>If one program unintentionally messes up the resources of another, then it could crash the program. Even worse, if a program (or user) intentionally messes with the resources of another, it could steal sensitive data.</p>\", \"id\": \"ecf0cda6-c795-4f0f-b66f-6dc81b0415f9\"}, {\"type\": \"paragraph\", \"value\": \"<p>So we need a way to control which programs and users can access which resources. People figured this out pretty early on, and came up with a way to provide this control: protection ring security.</p><p>With protection ring security, the operating system basically puts a protective barrier around the system\\u2019s resources. This is the kernel. The kernel is the only thing that gets to do operations like creating a new file or opening a file or opening a network connection.</p><p>The user\\u2019s programs run outside of this kernel in something called user mode. If a program wants to do anything like open a file, it has to ask the kernel to open the file for it.</p>\", \"id\": \"fef96f8a-4d79-4dfb-adbf-8bc4417abba5\"}, {\"type\": \"paragraph\", \"value\": \"<p>This is where the concept of the system call comes in. When a program needs to ask the kernel to do one of these things, it asks using a system call. This gives the kernel a chance to figure out which user is asking. Then it can see if that user has access to the file before opening it.</p><p>On most devices, this is the only way that your code can access the system\\u2019s resources\\u200a\\u2014\\u200athrough system calls.</p>\", \"id\": \"59b1422d-b264-4973-be5f-b383aaeaad32\"}, {\"type\": \"paragraph\", \"value\": \"<p>The operating system makes the system calls available. But if each operating system has its own system calls, wouldn\\u2019t you need a different version of the code for each operating system? Fortunately, you don\\u2019t.</p><p>How is this problem solved? Abstraction.</p><p>Most languages provide a standard library. While coding, the programmer doesn\\u2019t need to know what system they are targeting. They just use the interface.</p><p>Then, when compiling, your toolchain picks which implementation of the interface to use based on what system you\\u2019re targeting. This implementation uses functions from the operating system\\u2019s API, so it\\u2019s specific to the system.</p><p>This is where the system interface comes in. For example, <code>printf</code> being compiled for a Windows machine could use the Windows API to interact with the machine. If it\\u2019s being compiled for Mac or Linux, it will use POSIX instead.</p>\", \"id\": \"0c61b792-c170-4652-96eb-3bc8843a63a1\"}, {\"type\": \"paragraph\", \"value\": \"<p>This poses a problem for WebAssembly, though.</p><p>With WebAssembly, you don\\u2019t know what kind of operating system you\\u2019re targeting even when you\\u2019re compiling. So you can\\u2019t use any single OS\\u2019s system interface inside the WebAssembly implementation of the standard library.</p>\", \"id\": \"73a0ea75-4580-4689-b4a3-8f5fe97710de\"}, {\"type\": \"paragraph\", \"value\": \"<p>I\\u2019ve talked before about how WebAssembly is <a href=\\\"https://hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/\\\">an assembly language for a conceptual machine</a>, not a real machine. In the same way, WebAssembly needs a system interface for a conceptual operating system, not a real operating system.</p><p>But there are already runtimes that can run WebAssembly outside the browser, even without having this system interface in place. How do they do it? Let\\u2019s take a look.</p><h3>How is WebAssembly running outside the browser\\u00a0today?</h3><p>The first tool for producing WebAssembly was Emscripten. It emulates a particular OS system interface, POSIX, on the web. This means that the programmer can use functions from the C standard library (libc).</p><p>To do this, Emscripten created its own implementation of libc. This implementation was split in two\\u200a\\u2014\\u200apart was compiled into the WebAssembly module, and the other part was implemented in JS glue code. This JS glue would then call into the browser, which would then talk to the OS.</p>\", \"id\": \"ec469ce0-0430-434f-9e94-d4364e2b1b43\"}, {\"type\": \"paragraph\", \"value\": \"<p>Most of the early WebAssembly code was compiled with Emscripten. So when people started wanting to run WebAssembly without a browser, they started by making Emscripten-compiled code run.</p><p>So these runtimes needed to create their own implementations for all of these functions that were in the JS glue code.</p><p>There\\u2019s a problem here, though. The interface provided by this JS glue code wasn\\u2019t designed to be a standard, or even a public facing interface. That wasn\\u2019t the problem it was solving.</p><p>For example, for a function that would be called something like <code>read</code> in an API that was designed to be a public interface, the JS glue code instead uses <code>_system3(which, varargs)</code>.</p>\", \"id\": \"e44949b1-1220-4b7e-8ae8-c174c87b6f93\"}, {\"type\": \"paragraph\", \"value\": \"<p>The first parameter, <code>which</code>, is an integer which is always the same as the number in the name (so 3 in this case).</p><p>The second parameter, <code>varargs</code>, are the arguments to use. It\\u2019s called <code>varargs</code> because you can have a variable number of them. But WebAssembly doesn\\u2019t provide a way to pass in a variable number of arguments to a function. So instead, the arguments are passed in via linear memory. This isn\\u2019t type safe, and it\\u2019s also slower than it would be if the arguments could be passed in using registers.</p><p>That was fine for Emscripten running in the browser. But now runtimes are treating this as a de facto standard, implementing their own versions of the JS glue code. They are emulating an internal detail of an emulation layer of POSIX.</p><p>This means they are re-implementing choices (like passing arguments in as heap values) that made sense based on Emscripten\\u2019s constraints, even though these constraints don\\u2019t apply in their environments.</p>\", \"id\": \"a9e69d57-d3cb-4d7c-90e7-1d053c5ac55c\"}, {\"type\": \"paragraph\", \"value\": \"<p>If we\\u2019re going to build a WebAssembly ecosystem that lasts for decades, we need solid foundations. This means our de facto standard can\\u2019t be an emulation of an emulation.</p><p>But what principles should we apply?</p><h3>What principles does a WebAssembly system interface need to\\u00a0uphold?</h3><p>There are two important principles that are baked into WebAssembly\\u00a0:</p><ul><li>portability</li><li>security</li></ul><p>We need to maintain these key principles as we move to outside-the-browser use cases.</p><p>As it is, POSIX and Unix\\u2019s Access Control approach to security don\\u2019t quite get us there. Let\\u2019s look at where they fall short.</p><h4>Portability</h4><p>POSIX provides source code portability. You can compile the same source code with different versions of libc to target different machines.</p>\", \"id\": \"684bf9f7-73c5-4b3e-aa4e-57bedd8416bf\"}, {\"type\": \"paragraph\", \"value\": \"<p>But WebAssembly needs to go one step beyond this. We need to be able to compile once and run across a whole bunch of different machines. We need portable binaries.</p>\", \"id\": \"9f26ecdf-d52d-4c46-a376-436cf4007598\"}, {\"type\": \"paragraph\", \"value\": \"<p>This kind of portability makes it much easier to distribute code to users.</p><p>For example, if Node\\u2019s native modules were written in WebAssembly, then users wouldn\\u2019t need to run node-gyp when they install apps with native modules, and developers wouldn\\u2019t need to configure and distribute dozens of binaries.</p><h4>Security</h4><p>When a line of code asks the operating system to do some input or output, the OS needs to determine if it is safe to do what the code asks.</p><p>Operating systems typically handle this with access control that is based on ownership and groups.</p><p>For example, the program might ask the OS to open a file. A user has a certain set of files that they have access to.</p><p>When the user starts the program, the program runs on behalf of that user. If the user has access to the file\\u200a\\u2014\\u200aeither because they are the owner or because they are in a group with access\\u200a\\u2014\\u200athen the program has that same access, too.</p>\", \"id\": \"1fc49716-f400-4cab-9884-f9d75b643b55\"}, {\"type\": \"paragraph\", \"value\": \"<p>This protects users from each other. That made a lot of sense when early operating systems were developed. Systems were often multi-user, and administrators controlled what software was installed. So the most prominent threat was other users taking a peek at your files.</p><p>That has changed. Systems now are usually single user, but they are running code that pulls in lots of other, third party code of unknown trustworthiness. Now the biggest threat is that the code that you yourself are running will turn against you.</p><p>For example, let\\u2019s say that the library you\\u2019re using in an application gets a new maintainer (as often happens in open source). That maintainer might have your interest at heart\\u2026 or they might be one of the bad guys. And if they have access to do anything on your system\\u200a\\u2014\\u200afor example, open any of your files and send them over the network\\u200a\\u2014\\u200athen their code can do a lot of damage.</p>\", \"id\": \"4183e0e0-0a39-42bc-a2f3-b81fe0c929c5\"}, {\"type\": \"paragraph\", \"value\": \"<p>This is why using third-party libraries that can talk directly to the system can be dangerous.</p><p>WebAssembly\\u2019s way of doing security is different. WebAssembly is sandboxed.</p><p>This means that code can\\u2019t talk directly to the OS. But then how does it do anything with system resources? The host (which might be a browser, or might be a wasm runtime) puts functions in the sandbox that the code can use.</p><p>This means that the host can limit what a program can do on a program-by-program basis. It doesn\\u2019t just let the program act on behalf of the user, calling any system call with the user\\u2019s full permissions.</p><p>Just having a mechanism for sandboxing doesn\\u2019t make a system secure in and of itself\\u200a\\u2014\\u200athe host can still put all of the capabilities into the sandbox, in which case we\\u2019re no better off\\u200a\\u2014\\u200abut it at least gives hosts the option of creating a more secure system.</p>\", \"id\": \"48a73eef-ce3e-44dc-8edd-1325caa7222e\"}, {\"type\": \"paragraph\", \"value\": \"<p>In any system interface we design, we need to uphold these two principles. Portability makes it easier to develop and distribute software, and providing the tools for hosts to secure themselves or their users is an absolute must.,</p><h3>What should this system interface look\\u00a0like?</h3><p>Given those two key principles, what should the design of the WebAssembly system interface be?</p><p>That\\u2019s what we\\u2019ll figure out through the standardization process. We do have a proposal to start with, though:</p><ul><li>Create a modular set of standard interfaces</li><li>Start with standardizing the most fundamental module, wasi-core</li></ul>\", \"id\": \"5b5e06e3-c945-49c2-8370-f2fa17c0d618\"}, {\"type\": \"paragraph\", \"value\": \"<p>What will be in wasi-core?</p><p>wasi-core will contain the basics that all programs need. It will cover much of the same ground as POSIX, including things such as files, network connections, clocks, and random numbers.</p><p>And it will take a very similar approach to POSIX for many of these things. For example, it will use POSIX\\u2019s file-oriented approach, where you have system calls such as open, close, read, and write and everything else basically provides augmentations on top.</p><p>But wasi-core won\\u2019t cover everything that POSIX does. For example, the process concept does not map clearly onto WebAssembly. And beyond that, it doesn\\u2019t make sense to say that every WebAssembly engine needs to support process operations like <code>fork</code>. But we also want to make it possible to standardize <code>fork</code>.</p><p>This is where the modular approach comes in. This way, we can get good standardization coverage while still allowing niche platforms to use only the parts of WASI that make sense for them.</p>\", \"id\": \"7ddc7e29-0ca6-4312-bc68-57e4d083a8e7\"}, {\"type\": \"paragraph\", \"value\": \"<p>Languages like Rust will use wasi-core directly in their standard libraries. For example, Rust\\u2019s <code>open</code> is implemented by calling <code>__wasi_path_open</code> when it\\u2019s compiled to WebAssembly.</p><p>For C and C++, we\\u2019ve created a <a href=\\\"https://github.com/CraneStation/wasi-sysroot\\\">wasi-sysroot</a> that implements libc in terms of wasi-core functions.</p>\", \"id\": \"ef7ce40f-3877-4a7f-ba03-d35e33c9e235\"}, {\"type\": \"paragraph\", \"value\": \"<p>We expect compilers like Clang to be ready to interface with the WASI API, and complete toolchains like the Rust compiler and Emscripten to use WASI as part of their system implementations</p><p>How does the user\\u2019s code call these WASI functions?</p><p>The runtime that is running the code passes the wasi-core functions in as imports.</p>\", \"id\": \"93e60749-169a-402b-aea7-c20657546403\"}, {\"type\": \"paragraph\", \"value\": \"<p>This gives us portability, because each host can have their own implementation of wasi-core that is specifically written for their platform\\u200a\\u2014\\u200afrom WebAssembly runtimes like Mozilla\\u2019s wasmtime and Fastly\\u2019s Lucet, to Node, or even the browser.</p><p>It also gives us sandboxing because the host can choose which wasi-core functions to pass in\\u200a\\u2014\\u200aso, which system calls to allow\\u200a\\u2014\\u200aon a program-by-program basis. This preserves security.</p>\", \"id\": \"0fa6f520-d5f5-420e-a451-859351b493da\"}, {\"type\": \"paragraph\", \"value\": \"<p>WASI gives us a way to extend this security even further. It brings in more concepts from capability-based security.</p><p>Traditionally, if code needs to open a file, it calls <code>open</code> with a string, which is the path name. Then the OS does a check to see if the code has permission (based on the user who started the program).</p><p>With WASI, if you\\u2019re calling a function that needs to access a file, you have to pass in a file descriptor, which has permissions attached to it. This could be for the file itself, or for a directory that contains the file.</p><p>This way, you can\\u2019t have code that randomly asks to open <code>/etc/passwd</code>. Instead, the code can only operate on the directories that are passed in to it.</p>\", \"id\": \"0e6c1dc4-83e8-4b60-9df2-1c5072c92c22\"}, {\"type\": \"paragraph\", \"value\": \"<p>This makes it possible to safely give sandboxed code more access to different system calls\\u200a\\u2014\\u200abecause the capabilities of these system calls can be limited.</p><p>And this happens on a module-by-module basis. By default, a module doesn\\u2019t have any access to file descriptors. But if code in one module has a file descriptor, it can choose to pass that file descriptor to functions it calls in other modules. Or it can create more limited versions of the file descriptor to pass to the other functions.</p><p>So the runtime passes in the file descriptors that an app can use to the top level code, and then file descriptors get propagated through the rest of the system on an as-needed basis.</p>\", \"id\": \"b1842557-f545-4a8d-99ea-09da463914e4\"}, {\"type\": \"paragraph\", \"value\": \"<p>This gets WebAssembly closer to the principle of least privilege, where a module can only access the exact resources it needs to do its job.</p><p>These concepts come from capability-oriented systems, like CloudABI and Capsicum. One problem with capability-oriented systems is that it is often hard to port code to them. But we think this problem can be solved.</p><p>If code already uses <code>openat</code> with relative file paths, compiling the code will just work.</p><p>If code uses <code>open</code> and migrating to the <code>openat</code> style is too much up-front investment, WASI can provide an incremental solution. With <a href=\\\"https://github.com/musec/libpreopen\\\">libpreopen</a>, you can create a list of file paths that the application legitimately needs access to. Then you can use <code>open</code>, but only with those paths.</p><h3>What\\u2019s next?</h3><p>We think wasi-core is a good start. It preserves WebAssembly\\u2019s portability and security, providing a solid foundation for an ecosystem.</p><p>But there are still questions we\\u2019ll need to address after wasi-core is fully standardized. Those questions include:</p><ul><li>asynchronous I/O</li><li>file watching</li><li>file locking</li></ul><p>This is just the beginning, so if you have ideas for how to solve these problems, <a href=\\\"https://wasi.dev/\\\">join us</a>!</p>\", \"id\": \"c78f9cf8-eeaf-423b-81e1-3e94d382dfcb\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 14,
    "fields": {
      "description": "Firefox 66 is out, and brings with it a host of great new features like screen sharing, scroll anchoring, autoplay blocking for audible media, and initial support for the Touch Bar on macOS.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>These are just highlights. For complete information, see:</p><ul><li><a href=\\\"https://www.mozilla.org/firefox/66.0/releasenotes/\\\">Firefox 66 Release Notes</a></li><li><a href=\\\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/66\\\">Firefox 66 for Developers</a></li><li><a href=\\\"https://www.fxsitecompat.com/versions/66/\\\">Firefox 66 Site Compatibility</a></li></ul><h2>Audible Autoplay Blocking</h2><p>Starting with version 66, Firefox will <a href=\\\"https://hacks.mozilla.org/2019/02/firefox-66-to-block-automatically-playing-audible-video-and-audio/\\\">block audible autoplaying video and audio</a>. This means media (audio and video) have to wait for user interaction before playing, unless the <code>muted</code> property is set on the associated <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\\\">HTMLMediaElement</a>. Blocking can be disabled on a case-by-case basis in the site information overlay:</p>\", \"id\": \"91f72d15-f4d1-4712-b7b2-74a2b1c698d7\"}, {\"type\": \"paragraph\", \"value\": \"<p>Now <i>you</i> get to decide when to disturb <a href=\\\"https://www.youtube.com/watch?v=NAEppFUWLfc\\\">the sound of silence</a><a href=\\\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\\\">.</a></p><p><b><i>Note:</i></b><i> We\\u2019re rolling out blocking gradually to ensure that it doesn\\u2019t break legitimate use cases. All Firefox users should have blocking enabled</i> <a href=\\\"https://bugzilla.mozilla.org/1535667\\\"><i>within a few days</i></a><i>.</i><br/></p><h2>Usability Improvements</h2><h3>Scroll Anchoring</h3><p>Firefox now implements <a href=\\\"https://drafts.csswg.org/css-scroll-anchoring/\\\">scroll anchoring</a>, which prevents slow-loading content from suddenly appearing and pushing visible content off the page.</p><h3>Touch Bar</h3><p>The Touch Bar on macOS is now supported, offering quick access to common browser features without having to learn keyboard shortcuts.</p>\", \"id\": \"d1bce587-0cea-46ee-9417-66e0e1f5e699\"}, {\"type\": \"paragraph\", \"value\": \"<h3>Tab Search</h3><p>Too many tabs? The overflow menu sports a new option to search through your open tabs and switch to the right one.</p>\", \"id\": \"5c8ede6c-1352-4152-8c08-6515cb650536\"}, {\"type\": \"paragraph\", \"value\": \"<p>Astute users will note that clicking on \\u201cSearch Tabs\\u201d focuses the Awesomebar and types a <code>%</code> sign in front of your query. Thus, while the menu entry makes tab search much more discoverable, you can actually achieve the same effect by focusing the Awesomebar and manually typing a <code>%</code> sign or <a href=\\\"https://support.mozilla.org/en-US/kb/awesome-bar-search-firefox-bookmarks-history-tabs#w_changing-results-on-the-fly\\\">other modifier</a>.</p><h3>Extension Shortcuts</h3><p>Speaking of shortcuts, you can now manage and change all of the shortcuts set by extensions by visiting <code>about:addons</code> and clicking \\u201cManage Extension Shortcuts\\u201d under the gear icon on the Extensions overview page.</p>\", \"id\": \"7a29da21-1685-4262-8041-010e1ed9af6e\"}, {\"type\": \"paragraph\", \"value\": \"<h3>Better Security Warnings</h3><p>We\\u2019ve <a href=\\\"https://blog.mozilla.org/ux/2019/03/designing-better-security-warnings/\\\">completely redesigned Firefox\\u2019s security warnings</a> to better encourage safe browsing practices (i.e., don\\u2019t ignore the warnings!)</p><h2>Expanded CSS Features</h2><p>Firefox is the first browser to support animating the CSS Grid <code>grid-template-rows</code> and <code>grid-template-columns</code> properties, as seen in the <a href=\\\"https://www.youtube.com/watch?v=dC4W7t7JlHw\\\">video</a> below.</p>\", \"id\": \"c86abacf-7c2b-4217-8a1f-017ce093513f\"}, {\"type\": \"paragraph\", \"value\": \"<p>We\\u2019re also the first browser to support the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-inline\\\"><code>overflow-inline</code></a> and <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-block\\\"><code>overflow-block</code></a> media queries, which make it possible to apply styles based on whether (and how) overflowing content is available to the user. For example, a digital billboard might report <code>overflow-block: none</code>, while an e-reader would match <code>overflow-block: paged</code>.</p><p>Furthermore, Firefox now supports:</p><ul><li>Optional <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors#case-sensitive\\\">case sensitivity</a> for <code>[attr]</code> selectors.</li><li>Unprefixed <code>min-content</code> and <code>max-content</code> size keywords.</li><li><a href=\\\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/66#CSS\\\">19 new shorthand logical properties</a> \\u2014 these specify values relative to the current writing mode rather than the edges of the screen .</li></ul><h2>New DOM APIs</h2><p>The new <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\\\"><code>getDisplayMedia</code></a> API enables screen sharing on the Web similarly to how <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\\\"><code>getUserMedia</code></a> provides access to webcams. The resulting stream can be processed locally or shared over the network with WebRTC.\\u00a0See <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture\\\">Using the Screen Capture API</a> on MDN for more information.</p>\", \"id\": \"0bb64083-8313-4e1e-8782-b5298588f9f3\"}, {\"type\": \"paragraph\", \"value\": \"<p>Mozilla is using <code>getDisplayMedia</code> in Bugzilla to allow people to <a href=\\\"https://twitter.com/BugzillaUX/status/1106203965497081856\\\">take and attach screenshots</a> to their bug reports, directly from inside the browser.</p><p>Also, starting with Firefox 66, <code>InputEvent</code> now has a read-only property, <code>inputType</code>. This distinguishes between many different types of edits that can happen inside an input field, for example <code>insertText</code> versus <code>insertFromPaste</code>. To learn more, check out the documentation (and live demo) <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType\\\">on MDN</a>.</p><h2>Browser Internals</h2><p>Lastly, we\\u2019ve made a few changes to how Firefox works under the hood:</p><ul><li>Local storage for browser extensions is now backed by IndexedDB, offering <a href=\\\"https://blog.mozilla.org/addons/2019/02/15/extensions-in-firefox-66/\\\">significant performance and memory improvements</a>, especially for users with many extensions installed. No developer-facing APIs were changed; this improvement is completely transparent and automatic for extension authors.</li><li>We\\u2019ve <a href=\\\"http://www.erahm.org/2019/03/13/doubling-the-number-of-content-processes-in-firefox/\\\">doubled Firefox\\u2019s default number of content processes</a> from 4 to 8. We\\u2019ve managed to do this while keeping Firefox\\u2019s memory usage virtually unchanged thanks to Project Fission\\u2019s efforts to <a href=\\\"https://wiki.mozilla.org/Project_Fission/Memory\\\">reduce per-process overhead</a>.</li><li>Firefox now supports <a href=\\\"https://blog.mozilla.org/security/2019/03/19/passwordless-web-authentication-support-via-windows-hello/\\\">Windows Hello for passwordless authentication</a> online via <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\\\">WebAuthn</a>.</li></ul><p>From all of us at Mozilla, thank you for choosing Firefox!</p>\", \"id\": \"edf5d15e-8ff1-414e-a544-1f762569e413\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 15,
    "fields": {
      "description": "In Part 2 of my three-part Fearless Security series, I\u2019ll explore thread safety.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>Today\\u2019s applications are multi-threaded\\u2014instead of sequentially  completing tasks, a program uses threads to perform multiple tasks  simultaneously. We all use <i>concurrency</i> and <i>parallelism</i> every day:</p><ul><li>Web sites serve multiple simultaneous users.</li><li>User interfaces perform background work that doesn\\u2019t interrupt the  user. (Imagine if your application froze each time you typed a character  because it was spell-checking).</li><li>Multiple applications can run at the same time on a computer.</li></ul><p>While this allows programs to do more faster, it comes with a set of  synchronization problems, namely deadlocks and data races. From a  security standpoint, why do we care about thread safety? Memory safety  bugs and thread safety bugs have the same core problem: invalid resource  use. Concurrency attacks can lead to similar consequences as memory  attacks, including privilege escalation, arbitrary code execution (ACE),  and bypassing security checks.</p><p>Concurrency bugs, like implementation bugs, are closely related to  program correctness. While memory vulnerabilities are nearly always  dangerous, implementation/logic bugs don\\u2019t always indicate a security  concern, unless they occur in the part of the code that deals with  ensuring security contracts are upheld (e.g. allowing a security check  bypass). However, while security problems stemming from logic errors  often occur near the error in sequential code, concurrency bugs often  happen in <a href=\\\"http://www.cs.columbia.edu/~junfeng/papers/owl-dsn18.pdf\\\">different functions from their corresponding vulnerability</a>,  making them difficult to trace and resolve. Another complication is the  overlap between mishandling memory and concurrency flaws, which we see  in data races.</p><p>Programming languages have evolved different concurrency strategies  to help developers manage both the performance and security challenges  of multi-threaded applications.</p><h2>Problems with concurrency</h2><p>It\\u2019s a common axiom that parallel programming is hard\\u2014our brains are  better at sequential reasoning. Concurrent code can have unexpected and  unwanted interactions between threads, including deadlocks, race  conditions, and data races.</p><p>A <i>deadlock</i> occurs when multiple threads are each waiting on  the other to take some action in order to proceed, leading to the  threads becoming permanently blocked. While this is undesirable behavior  and could cause a denial of service attack, it wouldn\\u2019t cause  vulnerabilities like ACE.</p><p>A <i>race condition</i> is a situation in which the timing or ordering of tasks can affect the correctness of a program, while a <i>data race</i>  happens when multiple threads attempt to concurrently access the same  location in memory and at least one of those accesses is a write.  There\\u2019s a lot of overlap between data races and race conditions, but  they can also <a href=\\\"https://blog.regehr.org/archives/490\\\">occur independently</a>. <a href=\\\"https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong\\\">There are no benign data races</a>.</p><h3>Potential consequences of concurrency bugs:</h3><ol><li>Deadlock</li><li>Information loss: another thread overwrites information</li><li>Integrity loss: information from multiple threads is interlaced</li><li>Loss of liveness: performance problems resulting from uneven access to shared resources</li></ol><p>The best-known type of concurrency attack is called a <a href=\\\"https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use\\\">TOCTOU</a>  (time of check to time of use) attack, which is a race condition  between checking a condition (like a security credential) and using the  results. TOCTOU attacks are examples of integrity loss.</p><p>Deadlocks and loss of <i>liveness</i> are considered performance  problems, not security issues, while information and integrity loss are  both more likely to be security-related. This <a href=\\\"https://www.redballoonsecurity.com/publications/papers/Concurrency_Attacks.pdf\\\">paper from Red Balloon Security</a>  examines some exploitable concurrency errors. One example is a pointer  corruption that allows privilege escalation or remote execution\\u2014a  function that loads a shared ELF (Executable and Linkable Format)  library holds a semaphore correctly the first time it\\u2019s called, but the  second time it doesn\\u2019t, enabling kernel memory corruption. This attack  is an example of information loss.</p><p>The trickiest part of concurrent programming is testing and  debugging\\u2014concurrency bugs have poor reproducibility. Event timings,  operating system decisions, network traffic, etc. can all cause  different behavior each time you run a program that has a concurrency  bug.</p>\", \"id\": \"4df3e893-c064-4ec9-aaef-6440e7a1f9a0\"}, {\"type\": \"paragraph\", \"value\": \"<p>Not only can behavior change each time we run a concurrent program,  but inserting print or debugging statements can also modify the  behavior, causing <i>heisenbugs</i> (nondeterministic, hard to  reproduce bugs that are common in concurrent programming) to  mysteriously disappear. These operations are slow compared to others and  change message interleaving and event timing accordingly.</p><p>Concurrent programming is hard. Predicting how concurrent code  interacts with other concurrent code is difficult to do. When bugs  appear, they\\u2019re difficult to find and fix. Instead of relying on  programmers to worry about this, let\\u2019s look at ways to design programs  and use languages to make it easier to write concurrent code.</p><p>First, we need to define what \\u201cthreadsafe\\u201d means:</p><blockquote>  \\u201cA data type or static method is threadsafe if it behaves correctly  when used from multiple threads, regardless of how those threads are  executed, and without demanding additional coordination from the calling  code.\\u201d <a href=\\\"http://web.mit.edu/6.031/www/fa17/classes/20-thread-safety/\\\"><i>MIT</i></a> </blockquote><h2>How programming languages manage concurrency</h2><p>In languages that don\\u2019t statically enforce thread safety, programmers  must remain constantly vigilant when interacting with memory that can  be shared with another thread and could change at any time. In  sequential programming, we\\u2019re taught to avoid global variables in case  another part of code has silently modified them. Like manual memory  management, requiring programmers to safely mutate shared data is  problematic.</p>\", \"id\": \"91d74b07-d9e9-4ec5-81ff-587037093960\"}, {\"type\": \"paragraph\", \"value\": \"<p>Generally, programming languages are limited to two approaches for managing safe concurrency:</p><ol><li>Confining mutability or limiting sharing</li><li>Manual thread safety (e.g. locks, semaphores)</li></ol><p>Languages that limit threading either confine mutable variables to a  single thread or require that all shared variables be immutable. Both  approaches eliminate the core problem of data races\\u2014improperly mutating  shared data\\u2014but this can be too limiting. To solve this, languages have  introduced low-level synchronization primitives like <i>mutexes</i>. These can be used to build threadsafe data structures.</p><h3>Python and the global interpreter lock</h3><p>The reference implementation of Python, CPython, has a mutex called  the Global Interpreter Lock (GIL), which only allows a single thread to  access a Python object. Multi-threaded Python is notorious for being <a href=\\\"https://hackernoon.com/concurrent-programming-in-python-is-not-what-you-think-it-is-b6439c3f3e6a\\\">inefficient</a>  because of the time spent waiting to acquire the GIL. Instead, most  parallel Python programs use multiprocessing, meaning each process has  its own GIL.</p><h3>Java and runtime exceptions</h3><p><a href=\\\"https://en.wikipedia.org/wiki/Java_concurrency\\\">Java</a>  is designed to support concurrent programming via a shared-memory  model. Each thread has its own execution path, but is able to access any  object in the program\\u2014it\\u2019s up to the programmer to synchronize accesses  between threads using Java built-in primitives.</p><p>While Java has the building blocks for creating thread-safe programs, <a href=\\\"https://www.journaldev.com/1061/thread-safety-in-java\\\">thread safety</a> is <b>not</b>  guaranteed by the compiler (unlike memory safety). If an unsynchronized  memory access occurs (aka a data race), then Java will raise a runtime  exception\\u2014however, this still relies on programmers appropriately using  concurrency primitives.</p><h3>C++ and the programmer\\u2019s brain</h3><p>While Python avoids data races by synchronizing everything with the  GIL, and Java raises runtime exceptions if it detects a data race, C++  relies on programmers to manually synchronize memory accesses. Prior to  C++11, the standard library <a href=\\\"http://www.modernescpp.com/index.php/c-core-guidelines-rules-for-concurrency-and-parallelism\\\">did not include concurrency primitives</a>.</p><p>Most programming languages provide programmers with the tools to  write thread-safe code, and post hoc methods exist for detecting data  races and race conditions; however, this does not result in any  guarantees of thread safety or data race freedom.</p><h2>How does Rust manage concurrency?</h2><p>Rust takes a multi-pronged approach to eliminating data races, using  ownership rules and type safety to guarantee data race freedom at  compile time.</p><p>The <a href=\\\"https://hacks.mozilla.org/2019/01/fearless-security-memory-safety/\\\">first post</a>  of this series introduced ownership\\u2014one of the core concepts of Rust.  Each variable has a unique owner and can either be moved or borrowed. If  a different thread needs to modify a resource, then we can transfer  ownership by moving the variable to the new thread.</p><p>Moving enforces exclusion, allowing multiple threads to write to the  same memory, but never at the same time. Since an owner is confined to a  single thread, what happens if another thread borrows a variable?</p><p>In Rust, you can have either one mutable borrow or as many immutable  borrows as you want. You can never simultaneously have a mutable borrow  and an immutable borrow (or multiple mutable borrows). When we talk  about memory safety, this ensures that resources are freed properly, but  when we talk about thread safety, it means that only one thread can  ever modify a variable at a time. Furthermore, we know that no other  threads will try to reference an out of date borrow\\u2014borrowing enforces  either sharing or writing, but never both.</p><p>Ownership was designed to mitigate memory vulnerabilities. It turns out that it also prevents data races.</p><p>While many programming languages have methods to enforce memory  safety (like reference counting and garbage collection), they usually  rely on manual synchronization or prohibitions on concurrent sharing to  prevent data races. Rust\\u2019s approach addresses both kinds of safety by  attempting to solve the core problem of identifying valid resource use  and enforcing that validity during compilation.</p>\", \"id\": \"c12f78c0-153c-4b8a-89d3-6c76b85faca3\"}, {\"type\": \"paragraph\", \"value\": \"<h3>But wait! There\\u2019s more!</h3><p>The ownership rules prevent multiple threads from writing to the same  memory and disallow simultaneous sharing between threads and  mutability, but this doesn\\u2019t necessarily provide thread-safe data  structures. Every data structure in Rust is either thread-safe or it\\u2019s  not. This is communicated to the compiler using the type system.</p><blockquote>  A well-typed program can\\u2019t go wrong.  <i>Robin Milner, 1978</i> </blockquote><p>In programming languages, type systems describe valid behaviors. In  other words, a well-typed program is well-defined. As long as our types  are expressive enough to capture our intended meaning, then a well-typed  program will behave as intended.</p><p>Rust is a type safe language\\u2014the compiler verifies that all types are  consistent. For example, the following code would not compile:</p>\", \"id\": \"2ccd21f1-ec8f-4fb2-baff-c076b5014858\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"rust\", \"code\": \"let mut x = \\\"I am a string\\\";\\r\\n x = 6;\"}, \"id\": \"da8a9a30-1ead-485e-89d2-96a2c9e8dda6\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"rust\", \"code\": \"error[E0308]: mismatched types\\r\\n     --> src/main.rs:6:5\\r\\n      |\\r\\n    6 | x = 6; //\\r\\n      |     ^ expected &str, found integral variable\\r\\n      |\\r\\n      = note: expected type `&str`\\r\\n                 found type `{integer}`\"}, \"id\": \"b163d78c-9672-443f-a7fb-18dde943c85c\"}, {\"type\": \"paragraph\", \"value\": \"<p>All variables in Rust have a type\\u2014often, they\\u2019re implicit. We can  also define new types and describe what capabilities a type has using  the <a href=\\\"https://blog.rust-lang.org/2015/05/11/traits.html\\\">trait system</a>. Traits provide an interface abstraction in Rust. Two important built-in traits are <code>Send</code> and <code>Sync</code>, which are exposed by default by the Rust compiler for every type in a Rust program:</p><ul><li><code>Send</code> indicates that a struct may safely be sent between threads (required for an ownership move)</li><li><code>Sync</code> indicates that a struct may safely be shared between threads</li></ul><p>This example is a simplified version of the <a href=\\\"https://github.com/rust-lang/rust/blob/c84e7976423bb910bb5eb5eecffc7e33a897a97f/src/libstd/thread/mod.rs#L379-L383\\\">standard library code</a> that spawns threads:</p>\", \"id\": \"1306c386-8f34-459d-bbe2-8a8f4b06efa6\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"rust\", \"code\": \"fn spawn<Closure: Fn() + Send>(closure: Closure){ ... }\\r\\n\\r\\nlet x = std::rc::Rc::new(6);\\r\\nspawn(|| { x; });\"}, \"id\": \"c99c19cb-587c-4400-a970-ade3c09e352a\"}, {\"type\": \"paragraph\", \"value\": \"<p>The <code>spawn</code> function takes a single argument, <code>closure</code>, and requires that <code>closure</code> has a type that implements the <code>Send</code> and <code>Fn</code> traits. When we try to spawn a thread and pass a closure value that makes use of the variable <code>x</code>, the compiler rejects the program for not fulfilling these requirements with the following error:</p>\", \"id\": \"d03ce167-5495-49e4-a8df-7d9f23a2a68c\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"rust\", \"code\": \"error[E0277]: `std::rc::Rc<i32>` cannot be sent between threads safely\\r\\n     --> src/main.rs:8:1\\r\\n      |\\r\\n    8 | spawn(move || { x; });\\r\\n      | ^^^^^ `std::rc::Rc<i32>` cannot be sent between threads safely\\r\\n      |\\r\\n      = help: within `[closure@src/main.rs:8:7: 8:21 x:std::rc::Rc<i32>]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<i32>`\\r\\n      = note: required because it appears within the type `[closure@src/main.rs:8:7: 8:21 x:std::rc::Rc<i32>]`\\r\\n    note: required by `spawn`\"}, \"id\": \"905e052f-e8c2-4031-9246-8a5e09b1aa1e\"}, {\"type\": \"paragraph\", \"value\": \"<p>The <code>Send</code> and <code>Sync</code> <a href=\\\"https://doc.rust-lang.org/nomicon/send-and-sync.html\\\">traits</a>  allow the Rust type system to reason about what data may be shared. By  including this information in the type system, thread safety becomes  type safety. Instead of relying on documentation, <a href=\\\"https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html\\\">thread safety is part of the compiler\\u2019s law</a>.</p><p>This allows programmers to be opinionated about what can be shared  between threads, and the compiler will enforce those opinions.</p>\", \"id\": \"956d21d8-8938-4b6e-87b4-73b0bec41057\"}, {\"type\": \"paragraph\", \"value\": \"<p>While many programming languages provide tools for concurrent  programming, preventing data races is a difficult problem. Requiring  programmers to reason about complex instruction interleaving and  interaction between threads leads to error prone code. While thread  safety and memory safety violations share similar consequences,  traditional memory safety mitigations like reference counting and  garbage collection don\\u2019t prevent data races. In addition to statically  guaranteeing memory safety, Rust\\u2019s ownership model prevents unsafe data  modification and sharing across threads, while the type system  propagates and enforces thread safety at compile time.     </p>\", \"id\": \"561f891f-2717-4257-8a7c-501c637db50b\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 16,
    "fields": {
      "description": "Virtual reality (VR) seems complicated, but with a few JavaScript libraries and tools, and the power of WebGL,  you can make very nice VR scenes that can be viewed and shared in a  headset like an Oculus Go or HTC Vive, in a desktop web browser, or on  your smartphone. Let me show you how:",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>In this new YouTube series, <a href=\\\"https://www.youtube.com/playlist?list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin\\\">How to make a virtual reality project in your browser with three.js and WebVR</a>,  I\\u2019ll take you through building an interactive birthday card in seven  short tutorials, complete with code and examples to get you started. The  whole series clocks in under 60 minutes. We begin by getting a basic  cube on the screen, add some nice 3D models, set up lights and  navigation, then finally add music.</p><p>All you need are basic JavaScript skills and an internet connection.</p><p>Here\\u2019s the whole series. Come join me:</p><p><i>1:</i> <a href=\\\"https://www.youtube.com/watch?v=dfg9FcjsG5o&amp;index=2&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;t=10s\\\">Learn how to build virtual reality scenes on the web with WebVR and JavaScript</a></p><p><i>2:</i> <a href=\\\"https://www.youtube.com/watch?v=2TpxkhG9zbk&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=2\\\">Set up your WebVR workflow and code to build a virtual reality birthday card</a></p><p><i>3:</i> <a href=\\\"https://www.youtube.com/watch?v=BcLVkJSSlEc&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=3\\\">Using a WebVR editor (Spoke) to create a fun 3D birthday card</a></p><p><i>4:</i> <a href=\\\"https://www.youtube.com/watch?v=jEBNNe3aCvU&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=4\\\">How to create realistic lighting in a virtual reality scene</a></p><p><i>5:</i> <a href=\\\"https://www.youtube.com/watch?v=J4m1kk7H1q8&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=5\\\">How to move around in virtual reality using teleportation to navigate your scene</a></p><p><i>6:</i> <a href=\\\"https://www.youtube.com/watch?v=gy_3FiHiDxQ&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=6\\\">Adding text and text effects to your WebVR scene with a few lines of code</a></p><p><i>7:</i> <a href=\\\"https://www.youtube.com/watch?v=jJdZo0R71Kg&amp;list=PLo3w8EB99pqKLF6R8eAaleDeS-vUqOzin&amp;index=7\\\">How to add finishing touches like sound and sky to your WebVR scene</a></p><p>To learn how to make more cool stuff with web technologies, subscribe to <a href=\\\"https://www.youtube.com/user/mozhacks\\\">Mozilla Hacks</a> on YouTube. And if you want to get more involved in learning to create mixed reality experiences for the web, you can follow <a href=\\\"https://twitter.com/mozillareality\\\">@MozillaReality</a> on twitter for news, articles, and updates.</p>\", \"id\": \"46b42aa0-15df-4772-af9e-24b59a606cce\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 17,
    "fields": {
      "description": "Firefox 67 is available today, bringing a faster and better JavaScript debugger, support for CSS prefers-color-scheme media queries, and the initial debut of WebRender in stable Firefox.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>These are just the highlights. For complete information, see:</p><ul><li><a href=\\\"https://www.mozilla.org/en-US/firefox/67.0/releasenotes/\\\">Firefox 67 Release Notes</a></li><li><a href=\\\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/67\\\">Firefox 67 for Developers</a></li><li><a href=\\\"https://www.fxsitecompat.com/en-CA/versions/67/\\\">Firefox 67 Site Compatibility</a></li></ul><h2><b>CSS Color Scheme Queries</b></h2><p>New in Firefox 67, the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\\\"><code>prefers-color-scheme</code></a>  media feature allows sites to adapt their styles to match a user\\u2019s  preference for dark or light color schemes, a choice that\\u2019s begun to  appear in operating systems like <a href=\\\"https://blogs.windows.com/windowsexperience/2019/04/01/windows-10-tip-dark-theme-in-file-explorer/\\\">Windows</a>, <a href=\\\"https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/\\\">macOS</a> and <a href=\\\"https://www.theverge.com/2019/5/7/18530599/google-android-q-features-hands-on-dark-mode-gestures-accessibility-io-2019\\\">Android</a>. As an example of what this looks like in the real world, <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=188761\\\">Bugzilla</a> uses <code>prefers-color-scheme</code> to trigger a <a href=\\\"https://twitter.com/BugzillaUX/status/1112516874531540992\\\">brand new dark theme</a> if the user has set that preference.</p>\", \"id\": \"011fdf0d-af4c-46de-a89f-7495b7f25d1c\"}, {\"type\": \"paragraph\", \"value\": \"<p>The <code>prefers-color-scheme</code> media feature is currently supported in Firefox and Safari, with support in Chrome expected <a href=\\\"https://twitter.com/tomayac/status/1121661549242773505\\\">later this year</a>.</p><p>Additionally, the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/revert\\\"><code>revert</code></a>  keyword is now supported, making it possible to revert one or more CSS  property values back to their original values specified by the user  agent\\u2019s default styles (or by a custom user stylesheet if one is set).  Defined in <a href=\\\"https://drafts.csswg.org/css-cascade/#default\\\">Cascading and Inheritance Level 4</a>, <code>revert</code> is also supported by Safari.</p><h2><b>WebRender\\u2019s Stable Debut</b></h2><p>Nearly four years ago we started work on a <a href=\\\"https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/\\\">new rendering architecture</a> for Firefox with the goal of better utilizing modern graphics hardware. Today, we\\u2019re beginning to <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1541488\\\">gradually enable</a>  WebRender for users on Windows 10 with qualified hardware. This marks  the first time that WebRender has been enabled outside of Nightly and  Beta builds of Firefox, and we hope to expand the supported platforms in  future releases.</p>\", \"id\": \"9c385a9d-202b-483e-b0e2-0ded1cef774e\"}, {\"type\": \"paragraph\", \"value\": \"<p>You can read more about WebRender in <a href=\\\"https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/\\\"><i>The whole web at maximum FPS: How WebRender gets rid of jank</i></a><i>.</i></p><h2><b>More Capable DevTools</b></h2><p>Firefox 67 and 68 <a href=\\\"https://www.mozilla.org/en-US/firefox/developer/\\\">Developer Edition</a>  bring enormous improvements to Firefox\\u2019s JavaScript Debugger. Discover  faster load times, amazing support for source maps, more predictable  breakpoints, brand new logpoints, and much more.</p>\", \"id\": \"4b6d6fe7-bd50-44d2-9da7-29ca03fdc511\"}, {\"type\": \"paragraph\", \"value\": \"<p>We\\u2019ve collected the Debugger improvements in their own article: <a href=\\\"https://hacks.mozilla.org/2019/05/faster-smarter-javascript-debugging-in-firefox/\\\"><i>Faster, Smarter JavaScript Debugging in Firefox DevTools</i></a>.</p><p>In addition to the Debugger, the Web Console saw numerous updates, including <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1424159\\\">greater keyboard accessibility</a> and support for importing modules into the current page.</p><p>We\\u2019ve also <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Deprecated_tools\\\">removed or deprecated</a> a few seldom-used and experimental tools, including the Canvas Debugger, Shader Editor, Web Audio Inspector, and WebIDE.</p><h2><b>Browser Features</b></h2><h3><b>Side-by-Side Profiles</b></h3><p>Firefox now defaults to using <a href=\\\"https://blog.nightly.mozilla.org/2019/01/14/moving-to-a-profile-per-install-architecture/\\\">different profiles for each installed version</a>, making it easier than ever to run multiple copies of Firefox side-by-side.</p>\", \"id\": \"dce603f2-6cfe-4e87-a46f-ae3fa3074344\"}, {\"type\": \"paragraph\", \"value\": \"<p>In addition, the browser will warn you if you try to open a newer  profile with an older version of Firefox, as such mismatches can  occasionally lead to data loss. This protection can be bypassed with the  new <code>-allow-downgrade</code> command line argument.</p><h3><b>Enhanced Privacy Controls</b></h3><p>Firefox 67 better protects your privacy online with new Content Blocking options to avoid known cryptominers and fingerprinters.</p>\", \"id\": \"67bb1154-5b0d-4f19-a170-baafd8fe4ca9\"}, {\"type\": \"paragraph\", \"value\": \"<p>You also have more control over your extensions, which can be <a href=\\\"https://support.mozilla.org/en-US/kb/extensions-private-browsing\\\">prevented from running in private browsing windows</a>.</p>\", \"id\": \"325d92b3-7959-44c9-9265-1f0ad3321394\"}, {\"type\": \"paragraph\", \"value\": \"<p>This is the default for all newly installed extensions in Firefox 67,  though your previously installed extensions will receive permission by  default. You can adjust these permissions on a per-extension basis by  visiting <code>about:addons</code>.</p><h3><b>Easier Access to Firefox Accounts and Saved Passwords</b></h3><p>We\\u2019re working hard to make Firefox Accounts more useful and discoverable this year, starting with a new <a href=\\\"https://blog.mozilla.org/services/2019/04/16/making-firefox-accounts-more-transparent-in-firefox/\\\">default icon</a> in the browser toolbar.</p>\", \"id\": \"1b2403bf-e230-46bd-9147-e70608328a67\"}, {\"type\": \"paragraph\", \"value\": \"<p>The new icon indicates whether or not you\\u2019re signed into a Firefox  Account, and makes it easy to perform actions like sending tabs to other  devices or manually triggering a sync. Like other toolbar buttons, you  can freely move or hide the Firefox Account button according to your  preferences.</p><p>Check out the <a href=\\\"https://matthew.noorenberghe.com/blog/2019/05/password-manager-improvements-firefox-67\\\">many improvements to Firefox\\u2019s built-in password manager</a>,  including quicker access to your list of saved credentials. You can  either click on the new \\u201cLogins and Passwords\\u201d item in the main menu, or  the new \\u201cView Saved Logins\\u201d button in the login autocomplete popup.</p>\", \"id\": \"d3dd5d87-ac35-4053-8362-3acb3998260e\"}, {\"type\": \"paragraph\", \"value\": \"<p>This can be especially useful if you need to look up or edit a login  outside of the normal autofill workflow. And, if you use Firefox Sync,  you can access your saved passwords with the <a href=\\\"https://lockbox.firefox.com/\\\">Firefox Lockbox</a> app for Android or iOS.</p><h2><b>Web Platform Features</b></h2><h3><b>Support for legacy FIDO U2F APIs</b></h3><p>We\\u2019ve enabled <a href=\\\"https://blog.mozilla.org/security/2019/04/04/shipping-fido-u2f-api-support-in-firefox/\\\">legacy FIDO U2F support</a> to improve backwards compatibility with sites that have not yet upgraded to its standards-based successor, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\\\">WebAuthn</a>.</p><p>These APIs make it possible for websites to authenticate users with strong, hardware-backed authentication mechanisms like <a href=\\\"https://en.wikipedia.org/wiki/Universal_2nd_Factor\\\">USB security keys</a> or <a href=\\\"https://blog.mozilla.org/security/2019/03/19/passwordless-web-authentication-support-via-windows-hello/\\\">Windows Hello</a>.</p><h3><b>AV1 on Windows, Linux, and macOS</b></h3><p>Firefox now supports AV1, a <a href=\\\"https://research.mozilla.org/av1-media-codecs/\\\">next-generation video codec</a>, on all major desktop platforms. Also, playback on those platforms is now powered by <a href=\\\"https://code.videolan.org/videolan/dav1d\\\">dav1d</a>, a <a href=\\\"http://www.jbkempf.com/blog/post/2018/First-release-of-dav1d\\\">faster and more efficient</a> AV1 decoder developed by the VideoLAN and FFmpeg communities.</p><h3><b>JavaScript: </b><b><code>String.prototype.matchAll()</code></b><b> and Dynamic Imports</b></h3><p>Firefox joins Chrome in supporting the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\\\"><code>matchAll()</code></a>  String prototype method, which takes a regular expression and returns  an iterator of all matching text, including capturing groups.</p><p>The <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\\\"><code>import()</code></a>  function can now be used to dynamically load JavaScript modules,  similarly to how the static import statement works. Now it\\u2019s possible to  load modules conditionally or in response to user actions, though such  imports are harder to reason about for build tools that use static  analysis for optimizations like <a href=\\\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\\\">tree shaking</a>.</p><h2><b>And more awaits!</b></h2><p>This release includes plenty of other fixes and enhancements not  covered here, and lots more to come. So what are you waiting for? <a href=\\\"https://www.mozilla.org/firefox/\\\">Download Firefox 67</a> today and let us know what you think!</p>\", \"id\": \"bec85e1e-690e-4611-8bf7-922ed92f28f5\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 18,
    "fields": {
      "description": "In November, I wrote about my team\u2019s work on experimental new web design tools.  We also ran a survey to rank the challenges of web design and  development. A big thank you to everyone who participated in our open  design process! We received over 900 responses in one month, and  discovered major findings which continue to inform the Firefox DevTools\u2019  2019 roadmap.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h2>The Methods</h2><p>With guidance from Mozilla\\u2019s data scientists, I chose the <a href=\\\"https://en.wikipedia.org/wiki/MaxDiff\\\">MaxDiff</a>  method for the challenge-ranking portion of the survey. MaxDiff  requires the survey taker to make trade-offs within subsets of the pool  of options. This works well for ranking a large number of options, which  would be too overwhelming for a regular card sort. It also produces a  more accurate overall ranking by emphasizing relative differences in  priority.</p><p>In practice, this produced 10 survey pages that each showed a set of 4  random options from a pool of 23 total web design challenges.  Participants had to choose the \\u201cleast\\u201c and \\u201cmost\\u201d impactful options in  each set. The ranking was then determined by scores computed using the  following formula:</p><p># times rated best \\u2013 # times rated worst<br/> \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014<br/> # times item appeared  </p><p>The second portion of the survey focused on specific frustrations  with browser developer tools. For this section we only offered 7  options, so we used a simple drag-and-drop card sort.</p><h2>The Takeaways</h2>\", \"id\": \"952e37d6-0d45-4ad9-8adc-04a5c238224d\"}, {\"type\": \"paragraph\", \"value\": \"<p>The highest-ranked issues by far were related to <i>CSS layout debugging</i>\\u2014learning  the root cause of mysteries like unwanted scrollbars and unexpected  size and position. Accordingly, my highest priority right now is digging  deeper into CSS debugging issues with further research and experiments.  (You can help by taking my brief new <a href=\\\"https://qsurvey.mozilla.com/s3/CSS-Debugging-65d9390435c7H\\\">CSS Debugging follow-up survey</a>! More info below.)</p><p>Unsurprisingly, <i>cross-browser compatibility</i> was also a top  choice. We\\u2019re investigating ways to ease the pain of debugging browser  differences, including auditing, hints, and a more robust responsive  design tool.</p><p>Mid-ranked issues included <i>Flexbox</i>, <i>Grid</i>, and <i>Accessibility</i>. We plan to continue improving our <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector\\\">Accessibility Panel</a>; however, for now we\\u2019ll step back a bit from our successfully launched <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_Flexbox_layouts\\\">Flexbox</a> and <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\\\">Grid</a> tools. Letting them breathe and collecting more real-world feedback will allow us to swing back with fresh new ideas later.</p><p>Lowest-ranked issues included <i>Lack of Visual/WYSIWYG Tools</i>, <i>Animations</i>, <i>WebGL</i>, and <i>SVG</i>. The visual tools part was surprising\\u2014we\\u2019ve seen a lot of love for click-and-drag visual tools like the beautifully designed <a href=\\\"https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc\\\">Visbug</a> and <a href=\\\"https://webflow.com/\\\">Webflow</a>.  I suspect my old-school wording here\\u2014WYSIWYG (\\u201cwhat you see is what you  get\\u201d)\\u2014brought to mind less-delightful experiences of the past. There  are clearly ways to improve developers\\u2019 lives with modern tools in this  space.</p><p>As for the browser issues card sort, we hear you loud and clear on  the issue of \\u201cMoving CSS changes back to my editor.\\u201d We\\u2019re currently in  the process of adding export options to our Changes panel, and would  love your input on <a href=\\\"https://twitter.com/firefoxdevtools/status/1095794448317898752?s=21\\\">our designs</a>! DOM breakpoints are also in the plans for this year.</p><p>You can view the full MaxDiff and card sort rankings in <a href=\\\"https://data.surveygizmo.com/r/28049_5bfee46d691966.07620376\\\">this report</a>.</p><h2>Follow-up Survey: CSS Layout Debugging</h2>\", \"id\": \"791d700d-75c8-4cff-b4ee-9a05649a7b66\"}, {\"type\": \"paragraph\", \"value\": \"<p>Now we need your help again! The main takeaway from the first survey  was that developers and designers of every experience level want to  better understand CSS issues like unexpected scrollbars and sizing.  We\\u2019ve started researching and prototyping potential tool ideas for  investigating specific types of CSS bugs, but we need your feedback to  guide our work.</p><p>Please take a moment with our quick single-page <a href=\\\"https://qsurvey.mozilla.com/s3/CSS-Debugging-65d9390435c7H\\\">CSS Layout Debugging survey</a>  and help us rank the most time-consuming bugs. Your feedback will be  immensely helpful in clarifying our plans in 2019 and beyond.</p><p>Thank you!</p><p>Victoria &amp; the Firefox DevTools team</p>\", \"id\": \"3e587018-8516-4abe-81b9-da51e0bd333f\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 19,
    "fields": {
      "description": "It\u2019s easy to make lots of mistakes with a new technology, especially  something that\u2019s as big of a change from the past as CSS Grid. In this  video, I explain the 9 Biggest Mistakes people are making, with advice  and tips for avoiding these pitfalls and breaking old habits.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p><i>For more information:</i></p><p><b>Mistake 1: Thinking CSS Grid is Everything</b><br/> <a href=\\\"https://youtu.be/hs3piaN4b5I\\\">Flexbox vs. CSS Grid \\u2014 Which is Better?</a><br/> <a href=\\\"https://youtu.be/dQHtT47eH0M\\\">Using Flexbox &amp; Grid Together</a><br/> <a href=\\\"https://youtu.be/pOB75oTNhw0\\\">Obliterate Boxiness with CSS Shapes</a></p><p><b>Mistake 2: Using Only Percents for Sizing</b><br/> <a href=\\\"https://youtu.be/lZ2JX_6SGNI\\\">Min &amp; Max Content Sizing in CSS Grid</a><br/> <a href=\\\"https://youtu.be/ZPtpzuRajzM\\\">FR Units in CSS Grid</a><br/> <a href=\\\"https://youtu.be/mVQiNpqXov8\\\">MinMax in CSS Grid</a></p><p><b>Mistake 3 : Assuming You Need Breakpoints</b><br/> <a href=\\\"https://youtu.be/tFKrK4eAiUQ\\\">Incredibly Easy Layouts with CSS Grid</a></p><p><b>Mistake 4: Getting Confused by Numbering</b><br/> <a href=\\\"https://youtu.be/-hmOZU7Zk10\\\">Innovative &amp; Practical Graphic Design with CSS Grid</a><br/> <a href=\\\"https://youtu.be/FEnRpy9Xfes\\\">Basics of CSS Grid: The Big Picture</a></p><p><b>Mistake 5: Always Using 12-columns</b><br/> <a href=\\\"https://youtu.be/ZPtpzuRajzM?t=5m52s\\\">I talk about this towards the end of \\u201cFR Units in CSS Grid\\u201d</a></p><p><b>Mistake 6: Ignoring the Power of Rows</b><br/> <a href=\\\"https://youtu.be/EEOJZy_Gge4\\\">Flexibility &amp; The Fold</a><br/> <a href=\\\"https://youtu.be/YfIjFeBLhyA\\\">Whitespace on The Web</a></p><p><b>Mistake 7: Reaching for a Framework</b></p><p><b>Mistake 8: Waiting for IE11 to Die</b><br/> <a href=\\\"https://youtu.be/7msERxu7ivg\\\">Internet Explorer + CSS Grid?</a><br/> <a href=\\\"https://www.youtube.com/playlist?list=PLbSquHt1VCf1kpv9WRGMCA9_Nn4vCLZ9Y\\\">7-part Series on Writing Resilient CSS that works in all browsers</a></p><p><b>Mistake 9: Hesitating, Instead of Playing</b><br/> <a href=\\\"https://youtu.be/qNtJ5p3h2A4\\\">Responsive Mondrian</a><br/> <a href=\\\"https://youtu.be/OxrsO4aIjyc\\\">CSS Grid like you are Jan Tschichold</a></p>\", \"id\": \"623dd319-3927-4d5e-a427-1d46538b44dd\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 20,
    "fields": {
      "description": "Recently, Firefox had an incident in which most add-ons stopped working. This was due to an error on our end: we let one of the certificates used to sign add-ons expire which had the effect of disabling the vast majority of add-ons. Now that we\u2019ve fixed the problem for most users and most people\u2019s add-ons are restored, I wanted to walk through the details of what happened, why, and how we repaired it.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h2>Background: Add-Ons and Add-On Signing</h2><p>Although many people use Firefox out of the box, Firefox also supports a powerful extension mechanism called \\u201cadd-ons\\u201d. Add-ons allow users to add third party features to Firefox that extend the capabilities we offer by default. Currently there are over 15,000 Firefox add-ons with capabilities ranging from <a href=\\\"https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/\\\">blocking ads</a> to <a href=\\\"https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/\\\">managing hundreds of tabs</a>.</p><p>Firefox requires that all add-ons that are installed be <a href=\\\"https://blog.mozilla.org/addons/2015/02/10/extension-signing-safer-experience/\\\">digitally signed</a>. This requirement is intended to protect users from malicious add-ons by requiring some minimal standard of review by Mozilla staff. Before we introduced this requirement in 2015, we had <a href=\\\"https://blog.mozilla.org/addons/2015/04/15/the-case-for-extension-signing/\\\">serious problems</a> with malicious add-ons.</p><p>The way that the add-on signing works is that Firefox is configured with a preinstalled \\u201croot certificate\\u201d. That root is stored offline in a <a href=\\\"https://en.wikipedia.org/wiki/Hardware_security_module\\\">hardware security module (HSM)</a>. Every few years it is used to sign a new \\u201cintermediate certificate\\u201d which is kept online and used as part of the signing process. When an add-on is presented for signature, we generate a new temporary \\u201cend-entity certificate\\u201d and sign that using the intermediate certificate. The end-entity certificate is then used to sign the add-on itself. Shown visually, this looks like this:</p>\", \"id\": \"21d4d37c-083b-4d8c-af93-f4c2d12502b4\"}, {\"type\": \"paragraph\", \"value\": \"<p>Note that each certificate has a \\u201csubject\\u201d (to whom the certificate  belongs) and an \\u201cissuer\\u201d (the signer). In the case of the root, these  are the same entity, but for other certificates, the issuer of a  certificate is the subject of the certificate that signed it.</p><p>An important point here is that each add-on is signed by its own  end-entity certificate, but nearly all add-ons share the same  intermediate certificate <a href=\\\"https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/#footnote-1\\\">[1]</a>.  It is this certificate that encountered a problem: Each certificate has  a fixed period during which it is valid. Before or after this window,  the certificate won\\u2019t be accepted, and an add-on signed with that  certificate can\\u2019t be loaded into Firefox. Unfortunately, the  intermediate certificate we were using expired just after 1AM UTC on May  4, and immediately every add-on that was signed with that certificate  become unverifiable and could not be loaded into Firefox.</p><p>Although add-ons all expired around midnight, the impact of the  outage wasn\\u2019t felt immediately. The reason for this is that Firefox  doesn\\u2019t continuously check add-ons for validity. Rather, all add-ons are  checked about every 24 hours, with the time of the check being  different for each user. The result is that some people experienced  problems right away, some people didn\\u2019t experience them until much  later. We at Mozilla first became aware of the problem around 6PM  Pacific time on Friday May 3 and immediately assembled a team to try to  solve the issue.</p><h2>Damage Limitation</h2><p>Once we realized what we were up against, we took several steps to try to avoid things getting any worse.</p><p>First, we disabled signing of new add-ons. This was sensible at the  time because we were signing with a certificate that we knew was  expired. In retrospect, it might have been OK to leave it up, but it  also turned out to interfere with the \\u201chardwiring a date\\u201d mitigation we  discuss below (though eventually didn\\u2019t use) and so it\\u2019s good we  preserved the option. Signing is now back up.</p><p>Second, we immediately pushed a hotfix which suppressed re-validating  the signatures on add-ons. The idea here was to avoid breaking users  who hadn\\u2019t re-validated yet. We did this before we had any other fix,  and have removed it now that fixes are available.</p><h2>Working in Parallel</h2><p>In theory, fixing a problem like this looks simple: make a new, valid  certificate and republish every add-on with that certificate.  Unfortunately, we quickly determined that this wouldn\\u2019t work for a  number of reasons:</p><ol><li>There are a very large number of add-ons (over 15,000) and the  signing service isn\\u2019t optimized for bulk signing, so just re-signing  every add-on would take longer than we wanted.</li><li>Once add-ons were signed, users would need to get a new add-on. Some  add-ons are hosted on Mozilla\\u2019s servers and Firefox would update those  add-ons within 24 hours, but users would have to manually update any  add-ons that they had installed from other sources, which would be very  inconvenient.</li></ol><p>Instead, we focused on trying to develop a fix which we could provide to all our users with little or no manual intervention.</p><p>After examining a number of approaches, we quickly converged on two major strategies which we pursued in parallel:</p><ol><li>Patching Firefox to change the date which is used to validate the  certificate. This would make existing add-ons magically work again, but  required shipping a new build of Firefox (a \\u201cdot release\\u201d).</li><li>Generate a replacement certificate that was still valid and somehow  convince Firefox to accept it instead of the existing, expired  certificate.</li></ol><p>We weren\\u2019t sure that either of these would work, so we decided to  pursue them in parallel and deploy the first one that looked like it was  going to work. At the end of the day, we ended up deploying the second  fix, the new certificate, which I\\u2019ll describe in some more detail below.</p><h2>A Replacement Certificate</h2><p>As suggested above, there are two main steps we had to follow here:</p><ol><li>Generate a new, valid, certificate.</li><li>Install it remotely in Firefox.</li></ol><p>In order to understand why this works, you need to know a little more  about how Firefox validates add-ons. The add-on itself comes as a  bundle of files that includes the certificate chain used to sign it. The  result is that the add-on is independently verifiable as long as you  know the root certificate, which is configured into Firefox at build  time. However, as I said, the intermediate certificate was broken, so  the add-on wasn\\u2019t actually verifiable.</p><p>However, it turns out that when Firefox tries to validate the add-on,  it\\u2019s not limited to just using the certificates in the add-on itself.  Instead, it tries to build a valid chain of certificates starting at the  end-entity certificate and continuing until it gets to the root. The  algorithm is complicated, but at a high level, you start with the  end-entity certificate and then find a certificate whose subject is  equal to the issuer of the end-entity certificate (i.e., the  intermediate certificate). In the simple case, that\\u2019s just the  intermediate that shipped with the add-on, but it could be any  certificate that the browser happens to know about. If we can remotely  add a new, valid, certificate, then Firefox will try that as well. The  figure below shows the situation before and after we install the new  certificate.</p>\", \"id\": \"c78876c4-69c4-4123-b760-73803f269e2d\"}, {\"type\": \"paragraph\", \"value\": \"<p>Once the new certificate is installed, Firefox has two choices for  how to validate the certificate chain, use the old invalid certificate  (which won\\u2019t work) and use the new valid certificate (which will work).  An important feature here is that the new certificate has the same  subject name and public key as the old certificate, so that its  signature on the End-Entity certificate is valid. Fortunately, Firefox  is smart enough to try both until it finds a path that works, so the  add-on becomes valid again. Note that this is the same logic we use for  validating TLS certificates, so it\\u2019s relatively well understood code  that we were able to leverage.<a href=\\\"https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/#footnote-2\\\">[2]</a></p><p>The great thing about this fix is that it doesn\\u2019t require us to  change any existing add-on. As long as we get the new certificate into  Firefox, then even add-ons which are carrying the old certificate will  just automatically verify. The tricky bit then becomes getting the new  certificate into Firefox, which we need to do automatically and  remotely, and then getting Firefox to recheck all the add-ons that may  have been disabled.</p><h2>Normandy and the Studies System</h2><p>Ironically, the solution to this problem is a special type of add-on  called a system add-on (SAO). In order to let us do research studies, we  have developed a system called Normandy which lets us serve SAOs to  Firefox users. Those SAOs automatically execute on the user\\u2019s browser  and while they are usually used for running experiments, they also have  extensive access to Firefox internal APIs. Important for this case, they  can add new certificates to the certificate database that Firefox uses  to verify add-ons.<a href=\\\"https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/#footnote-3\\\">[3]</a></p><p>So the fix here is to build a SAO which does two things:</p><ol><li>Install the new certificate we have made.</li><li>Force the browser to re-verify every add-on so that the ones which were disabled become active.</li></ol><p>But wait, you say. Add-ons don\\u2019t work so how do we get it to run? Well, we sign it with the new certificate!</p><h2>Putting it all together\\u2026 and what took so long?</h2><p>OK, so now we\\u2019ve got a plan: issue a new certificate to replace the  old one, build a system add-on to install it on Firefox, and deploy it  via Normandy. Starting from about 6 PM Pacific on Friday May 3, we were  shipping the fix in Normandy at 2:44 AM, or after less than 9 hours, and  then it took another 6-12 hours before most of our users had it. This  is actually quite good from a standing start, but I\\u2019ve seen a number of  questions on Twitter about why we couldn\\u2019t get it done faster. There are  a number of steps that were time consuming.</p><p>First, it took a while to issue the new intermediate certificate. As I  mentioned above, the Root certificate is in a hardware security module  which is stored offline. This is good security practice, as you use the  Root very rarely and so you want it to be secure, but it\\u2019s obviously  somewhat inconvenient if you want to issue a new certificate on an  emergency basis. At any rate, one of our engineers had to drive to the  secure location where the HSM is stored. Then there were a few false  starts where we didn\\u2019t issue exactly the right certificate, and each  attempt cost an hour or two of testing before we knew exactly what to  do.</p><p>Second, developing the system add-on takes some time. It\\u2019s  conceptually very simple, but even simple programs require taking some  care, and we really wanted to make sure we didn\\u2019t make things worse. And  before we shipped the SAO, we had to test it, and that takes time,  especially because it has to be signed. But the signing system was  disabled, so we had to find some workarounds for that.</p><p>Finally, once we had the SAO ready to ship, it still takes time to  deploy. Firefox clients check for Normandy updates every 6 hours, and of  course many clients are offline, so it takes some time for the fix to  propagate through the Firefox population. However, at this point we  expect that most people have received the update and/or the dot release  we did later.</p><h2>Final Steps</h2><p>While the SAO that was deployed with Studies should fix most users,  it didn\\u2019t get to everyone. In particular, there are a number of types of  affected users who will need another approach:</p><ul><li>Users who have disabled either Telemetry or Studies.</li><li>Users on Firefox for Android (Fennec), where we don\\u2019t have Studies.</li><li> Users of downstream builds of Firefox ESR that don\\u2019t opt-in to<br/> telemetry reporting.</li><li>Users who are behind HTTPS Man-in-the-middle proxies, because our  add-on installation systems enforce key pinning for these connections,  which proxies interfere with.</li><li>Users of very old builds of Firefox which the Studies system can\\u2019t reach.</li></ul><p>We can\\u2019t really do anything about the last group \\u2014 they should update  to a new version of Firefox anyway because older versions typically  have quite serious unfixed security vulnerabilities. We know that some  people have stayed on older versions of Firefox because they want to run  old-style add-ons, but many of these now work with newer versions of  Firefox. For the other groups we have developed a patch to Firefox that  will install the new certificate once people update. This was released  as a \\u201cdot release\\u201d so people will get it \\u2014 and probably have already \\u2014  through the ordinary update channel. If you have a downstream build,  you\\u2019ll need to wait for your build maintainer to update.</p><p>We recognize that none of this is perfect. In particular, in some  cases, users lost data associated with their add-ons (an example here is  the <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1549204\\\">\\u201cmulti-account containers\\u201d add-on</a>).</p><p>We were unable to develop a fix that would avoid this side effect,  but we believe this is the best approach for the most users in the short  term. Long term, we will be looking at better architectural approaches  for dealing with this kind of issue.</p><h2>Lessons</h2><p>First, I want to say that the team here did amazing work: they built  and shipped a fix in less than 12 hours from the initial report. As  someone who sat in the meeting where it happened, I can say that people  were working incredibly hard in a tough situation and that very little  time was wasted.</p><p>With that said, obviously this isn\\u2019t an ideal situation and it  shouldn\\u2019t have happened in the first place. We clearly need to adjust  our processes both to make this and similar incidents it less likely to  happen and to make them easier to fix.</p><p>We\\u2019ll be running a formal post-mortem next week and will publish the  list of changes we intend to make, but in the meantime here are my  initial thoughts about what we need to do. First, we should have a much  better way of tracking the status of everything in Firefox that is a  potential time bomb and making sure that we don\\u2019t find ourselves in a  situation where one goes off unexpectedly. We\\u2019re still working out the  details here, but at minimum we need to inventory everything of this  nature.</p><p>Second, we need a mechanism to be able to quickly push updates to our users even when \\u2014 <i>especially when</i>  \\u2014 everything else is down. \\u00a0It was great that we are able to use the  Studies system, but it was also an imperfect tool that we pressed into  service, and that had some undesirable side effects. In particular, we  know that many users have auto-updates enabled but would prefer not to  participate in Studies and that\\u2019s a reasonable preference (true story: I  had it off as well!) but at the same time we need to be able to push  updates to our users; whatever the internal technical mechanisms, users  should be able to opt-in to updates (including hot-fixes) but opt out of  everything else. Additionally, the update channel should be more  responsive than what we have today. Even on Monday, we still had some  users who hadn\\u2019t picked up either the hotfix or the dot release, which  clearly isn\\u2019t ideal. There\\u2019s been some work on this problem already, but  this incident shows just how important it is.</p><p>Finally, we\\u2019ll be looking more generally at our add-on security  architecture to make sure that it\\u2019s enforcing the right security  properties at the least risk of breakage.</p><p>We\\u2019ll be following up next week with the results of a more thorough  post-mortem, but in the meantime, I\\u2019ll be happy to answer questions by  email at ekr-blog@mozilla.com.</p><p>[1] A few very old add-ons were signed with a different intermediate.</p><p>[2] Readers who are familiar with the WebPKI will recognize that this is also the way that cross-certification works.<br/> [3] Technical note: we  aren\\u2019t adding the certificate with any special privileges; it gets its  authority by being signed for the root. We\\u2019re just adding it to the pool  of certificates which can be used by Firefox. So, it\\u2019s not like we are  adding a new privileged certificate to Firefox.</p>\", \"id\": \"5d512021-c988-420c-8a27-14b5d3fc2545\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 21,
    "fields": {
      "description": "Firefox 66 was released on March 19th with a feature called scroll anchoring. It\u2019s based on a new CSS specification that was first implemented by Chrome, and is now available in Firefox.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>Have you ever had this experience before?</p>\", \"id\": \"273bbb88-8ee5-4f4e-9bb6-95bfa197064f\"}, {\"type\": \"paragraph\", \"value\": \"<p>You <i>were</i> reading headlines, but then an ad loads and moves what you were reading off the screen.</p><p>Or how about this?!</p>\", \"id\": \"3adafedf-1511-4744-9026-d9c2953c8fc9\"}, {\"type\": \"paragraph\", \"value\": \"<p>You rotate your phone, but now you can\\u2019t find the paragraph that you were just reading.</p><p>There\\u2019s a common cause for both of these issues.</p><p>Browsers scroll by tracking the distance you are from the top of the page. As you scroll around, the browser increases or decreases your distance from the top.</p><p>But what happens if an ad loads on a page above where you are reading?</p><p>The browser keeps you at the same distance from the top of the page, but now there is more content between what you\\u2019re reading and the top. In effect, this moves the visible part of the page up away from what you\\u2019re reading (and oftentimes into the ad that\\u2019s just loaded).</p><p>Or, what if you rotate your phone to portrait mode?</p><p>Now there\\u2019s much less horizontal space on the screen, and a paragraph that was <code>100px</code> tall may now be <code>200px</code> tall. If the paragraph you were reading was <code>1000px</code> from the top of the page before rotating, it may now be <code>2000px</code> from the top of the page after rotating. If the browser is still scrolled to <code>1000px</code>, you\\u2019ll be looking at content far above where you were before.</p><p>The key insight to fixing these issues is that users don\\u2019t care what distance they are from the top of the page. They care about their position relative to the content they\\u2019re looking at!</p><p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor/Guide_to_scroll_anchoring\\\">Scroll anchoring</a> works to <i>anchor</i> the user to the content that they\\u2019re looking at. As this content is moved by ads, screen rotations, screen resizes, or other causes, the page now scrolls to keep you at the same relative position to it.</p><h2>Demos</h2><p>Let\\u2019s take a look at some examples of scroll anchoring in action.</p><p>Here\\u2019s a <a href=\\\"https://eqrion.github.io/web-tests/scrolling/anchor-slider.html\\\">page</a> with a slider that changes the height of an element at the top of the page. Scroll anchoring prevents the element above the viewport from changing what you\\u2019re looking at.</p>\", \"id\": \"45a84ab4-2a05-4fe2-92cb-d65c5590f65c\"}, {\"type\": \"paragraph\", \"value\": \"<p>Here\\u2019s a <a href=\\\"https://eqrion.github.io/web-tests/scrolling/anchor-animation.html\\\">page</a> using CSS animations and transforms to change the height of elements on the page. Scroll anchoring keeps you looking at the same paragraph even though it\\u2019s been moved by animations.</p>\", \"id\": \"24a9f12c-753e-4e1c-8cdd-d87e9a7fd12e\"}, {\"type\": \"paragraph\", \"value\": \"<p>And finally, here\\u2019s the original video of screen rotation with scroll anchoring disabled, in contrast to the view with scroll anchoring enabled.</p>\", \"id\": \"30f510e0-9342-4e1f-9c7e-99fd0613f750\"}, {\"type\": \"paragraph\", \"value\": \"<p>Notice how we jump to an unrelated section when scroll anchoring is disabled?</p><h2>How it works</h2><p>Scroll anchoring works by first selecting an element of the DOM to be the <a href=\\\"https://drafts.csswg.org/css-scroll-anchoring/#scroll-anchoring-anchor-node\\\">anchor node</a> and then attempting to keep that node in the same relative position on the screen.</p><p>To choose an anchor node, scroll anchoring uses the <a href=\\\"https://drafts.csswg.org/css-scroll-anchoring/#anchor-node-selection\\\">anchor selection algorithm</a>. The algorithm attempts to pick content that is small and near the top of the page. The exact steps are slightly complicated, but roughly it works by iterating over the elements in the DOM and choosing the first one that is visible on the screen.</p><p>When a new element is added to the page, or the screen is rotated/resized, the page\\u2019s layout needs to be recalculated. During this process, we check to see if the anchor node has been moved to a new location. If so, we scroll to keep the page in the same relative position to the anchor node.</p><p>The end result is that changes to the layout of a page above the anchor node are not able to change the relative position of the anchor node on the screen.</p><h2>Web compatibility</h2><p>New features are great, but do they break websites for users?</p><p>This feature is an <a href=\\\"https://github.com/WICG/interventions\\\">intervention</a>. It breaks established behavior of the web to fix an annoyance for users.</p><p>It\\u2019s similar to how browsers worked to prevent popup-ads in the past, and the ongoing work to prevent autoplaying audio and video.</p><p>This type of workaround comes with some risk, as existing websites have expectations about how scrolling works.</p><p>Scroll anchoring mitigates the risk with several <a href=\\\"https://drafts.csswg.org/css-scroll-anchoring/#suppression-triggers\\\">heuristics</a> to disable the feature in situations that have caused problems with existing websites.</p><p>Additionally, a new CSS property has been introduced, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor\\\"><code>overflow-anchor</code></a>, to allow websites to opt-out of scroll anchoring.</p><p>To use it, just add <code>overflow-anchor: none</code> on any scrolling element where you don\\u2019t want to use scroll anchoring. Additionally, you can add <code>overflow-anchor: none</code> to specific elements that you want to exclude from being selected as anchor nodes.</p><p>Of course there are still possible incompatibilities with existing sites. If you see a new issue caused by scroll anchoring, please <a href=\\\"https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=Layout%3A+Scrolling+and+Overflow\\\">file a bug</a>!</p><h2>Future work</h2><p>The version of scroll anchoring shipping now in Firefox 66 is our initial implementation. In the months ahead we will continue to improve it.</p><p>The most significant effort will involve improving the algorithm used to select an anchor.</p><p>Scroll anchoring is most effective when it selects an anchor that\\u2019s small and near the top of your screen.</p><ol><li>If the anchor is too large, it\\u2019s possible that content inside of it will expand or shrink in a way that we won\\u2019t adjust for.</li><li>If the anchor is too far from the top of the screen, it\\u2019s possible that content below what you\\u2019re looking at will expand and cause unwanted scroll adjustments.</li></ol><p>We\\u2019ve found that our implementation of the specification can select inadequate anchors on pages with table layouts or significant content inside of <code>overflow: hidden</code>.</p><p>This is due to a fuzzy area of the specification where we chose an approach different than Chrome\\u2019s implementation. This is one of the values of multiple browser implementations: We have gained significant experience with scroll anchoring and hope to bring that to the specification, to ensure it isn\\u2019t defined by the implementation details of only one browser.</p><p>The scroll anchoring feature in Firefox has been developed by many people. Thanks go out to Daniel Holbert, David Baron, Emilio Cobos \\u00c1lvarez, and Hiroyuki Ikezoe for their guidance and many reviews.</p>\", \"id\": \"7824593a-1e0b-44b4-9e29-7c1ac43ba716\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 22,
    "fields": {
      "description": "Author\u2019s note: Hi, I\u2019m an engineer at Mozilla working on the Firefox DevTools server. I\u2019m also a TC39 representative. This post focuses on some of the experiments I am trying out at theTC39, the standards body that manages the JavaScript specification. A follow up post will follow\u2026",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>In what ways can empirical evidence be used in the design of a language like JavaScript? What kind of impact would a more direct connection to developers give us? As stewards of the JavaScript specification, how do we answer questions about the design of JavaScript and help make it accessible to the thousands of new coders who join the industry each year? To answer this we need to experiment, and I need your help.</p><p><i>Enter stage left:</i> <a href=\\\"https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment\\\"><i>a survey</i></a></p><p>I know, it isn\\u2019t so exciting. It\\u2019s a survey. We are testing whether or not the methods used in this survey provide useful information about specific parts of a proposal. In other words, we are testing how we can identify different factors related to code: Cognitive load, error proneness, readability, and learn-ability.</p><p>The goal is to see what we can learn from the data you share. Whether it will be useful remains to be seen. This is the first attempt to do this, so it will not be perfect.</p><p>This is also why I need everyone\\u2019s help. Whatever your background, your responses will be very much appreciated. You might be learning JavaScript as your first language, coming to JavaScript from another language, or working in the language professionally.</p><p>Well, I <i>hope</i> I have gotten everyone excited to take a survey. I am certainly excited. It is estimated to be 15 minutes, I hope it is enjoyable!</p><p><a href=\\\"https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment\\\">Here is the survey link again.</a></p>\", \"id\": \"7c13a601-2b4b-4f1a-a1fa-32e2a0902692\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 23,
    "fields": {
      "description": "At Mozilla, we want WebAssembly to be as fast as it can be.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>This started with its design, which gives it <a href=\\\"https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast\\\">great throughput</a>. Then we improved load times with a <a href=\\\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\\\">streaming baseline compiler</a>. With this, we compile code faster than it comes over the network.</p><p>So what\\u2019s next?</p><p>One of our big priorities is making it easy to combine JS and  WebAssembly. But function calls between the two languages haven\\u2019t always  been fast. In fact, they\\u2019ve had a reputation for being slow, as I  talked about in my <a href=\\\"https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/\\\">first series on WebAssembly</a>.</p><p>That\\u2019s changing, <a href=\\\"https://bnjbvr.github.io/perf-wasm-calls/\\\">as you can see</a>.\\u00a0</p><p>This means that in the latest version of Firefox Beta, calls between  JS and WebAssembly are faster than non-inlined JS to JS function calls.  Hooray! </p>\", \"id\": \"aafa65eb-b94f-4947-a833-3542da4ae044\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 24,
    "fields": {
      "description": "ES6 In Depth is a series on new features being added to the JavaScript programming language in the 6th Edition of the ECMAScript standard, ES6 for short.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>How do you loop over the elements of an array? When JavaScript was introduced, twenty years ago, you would do it like this:</p>\", \"id\": \"58183f99-f9c8-4439-a011-d788b5b8b656\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"js\", \"code\": \"for (var index = 0; index < myArray.length; index++) {\\r\\n  console.log(myArray[index]);\\r\\n}\"}, \"id\": \"3158b6ff-ed6e-46b6-b519-b1b76625835c\"}, {\"type\": \"paragraph\", \"value\": \"<p>Since ES5, you can use the built-in <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\\\"><code>forEach</code></a> method:</p>\", \"id\": \"15b49cfb-e566-4716-955b-bcca25eafc97\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"js\", \"code\": \"myArray.forEach(function (value) {\\r\\n  console.log(value);\\r\\n});\"}, \"id\": \"e2a573c1-e438-4544-960e-17c97fa454f8\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 25,
    "fields": {
      "description": "ES6 In Depth is a series on new features being added to the JavaScript programming language in the 6th Edition of the ECMAScript standard, ES6 for short. Editor\u2019s note: An earlier version of today\u2019s post, by Firefox Developer Tools engineer Nick Fitzgerald, originally appeared on Nick\u2019s blog as Destructuring Assignment in ES6.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h3>What is destructuring assignment?</h3><p>Destructuring assignment allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals. This syntax can be extremely terse, while still exhibiting more clarity than the traditional property access.</p><p>Without destructuring assignment, you might access the first three items in an array like this:</p>\", \"id\": \"fcfe60e8-850d-4c03-b0d0-e1ad9aa8831b\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"js\", \"code\": \"var first = someArray[0];\\r\\nvar second = someArray[1];\\r\\nvar third = someArray[2];\"}, \"id\": \"9f73ee3e-8aeb-4389-a1c8-75464c60c26a\"}, {\"type\": \"paragraph\", \"value\": \"<p>With destructuring assignment, the equivalent code becomes more concise and readable:</p>\", \"id\": \"eb037fd4-7090-417f-a51c-4d2402a0fde4\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"js\", \"code\": \"var [first, second, third] = someArray;\"}, \"id\": \"444c00c3-6499-4414-b250-f86f1f009c04\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 26,
    "fields": {
      "description": "It\u2019s a common, but fairly easy-to-fix accessibility issue: lack of indicating focus. In this post I will explain what we mean by focus and show you how focus outlines make your site easier to use.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h2>What is focus?</h2><p><i>Focus indicators</i> make the difference between day and night for people who rely on them. Let\\u2019s first look at what they are, and which people find them useful.</p><p>Focus is something that happens between the <i>interactive</i> <i>elements</i> on a page. That\\u2019s the first thing you should know. (See the <a href=\\\"https://allyjs.io/data-tables/focusable.html\\\">focusable elements compatibility table</a> for a more detailed and nuanced definition.) <a href=\\\"https://html.spec.whatwg.org/multipage/dom.html#interactive-content-2\\\">Interactive elements</a> are elements like links, buttons and form fields: things that users can interact with.</p>\", \"id\": \"334cb766-dbd4-4b6b-b69d-f535d4b0e011\"}, {\"type\": \"paragraph\", \"value\": \"<p>On a page, at any given time, there is <i>one</i> element that has focus. If you\\u2019ve just loaded a page, it is probably the document, but once you start to click or tab, it will be one of the aforementioned interactive elements. The currently focused element can be found with <code>document.activeElement</code>.</p><p>By default, browsers convey which element currently has focus by drawing an outline around that element. The defaults vary between browsers and platform. With CSS, you can override these defaults, which we\\u2019ll get to in a bit.</p><h3>Who benefits</h3><p>Focus outlines help users figure out where they are on a page. They show which form field is currently filled in, or which button is about to be pressed. People who use a mouse, might use their cursor for this, but not everyone uses a mouse. For instance, there are many keyboard users: a person with a baby on one arm, people with chronic diseases that prevent the use of a mouse, and of course\\u2026 developers and other power users. Beyond keyboards, there are other tools and input devices that rely on clearly indicated focus, like <a href=\\\"https://axesslab.com/switches/\\\">switches</a>.</p><p>It is not just keyboard users that benefit, though. Focus indication also helps people who have limited attention spans or issues with short term memory, for example if they are filling out a lengthy form.</p><p>If the idea of indicating the current element in a website seems weird, consider TV interfaces. Most people use them with a remote control or game controller, and therefore rely on the interface to convey what\\u2019s currently selected.</p><h3>Never remove them</h3><p>Not everyone likes how focus outlines look, some find them ugly. But then that\\u2019s the case with street lights, too. They are unlikely to win design awards, but if you have to walk home in the dark, you are glad they help you see where you are.</p><p>Removing focus styles, as some websites do, is as detrimental for keyboard users as removing the mouse cursor would be for mouse users.</p><p>Nobody would override the browser\\u2019s default cursor, effectively removing the cursor altogether:</p>\", \"id\": \"c07be35a-961c-4e52-8436-3177eeda87c7\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 27,
    "fields": {
      "description": "Fluent is a family of localization specifications, implementations and good practices developed by Mozilla. It is currently used in Firefox. With Fluent, translators can create expressive translations that sound great in their language. Today we\u2019re announcing version 1.0 of the Fluent file format specification. We\u2019re inviting translation tool authors to try it out and provide feedback.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<h2>The Problem Fluent Solves</h2><p>With almost 100 supported languages, Firefox faces many localization challenges. Using traditional localization solutions, these are difficult to overcome. Software localization has been dominated by an outdated paradigm: translations that map one-to-one to the source language. The grammar of the source language, which at Mozilla is English, imposes limits on the expressiveness of the translation.</p><p>Consider the following message which appears in Firefox when the user tries to close a window with more than one tab.</p>\", \"id\": \"e7dabca7-4036-44a9-8f57-af0908a3e7ed\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 28,
    "fields": {
      "description": "This research was conducted in partnership with the UCOSP (Undergraduate Capstone Open Source Projects) initiative. UCOSP facilitates open source software development by connecting Canadian undergraduate students with industry mentors to practice distributed development and data projects.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p><i>The team consisted of the following Mozilla staff:</i> <a href=\\\"https://mozillians.org/en-GB/u/mlopatka/\\\"><i>Martin Lopatka</i></a><i>,</i> <a href=\\\"https://github.com/dzeber\\\"><i>David Zeber</i></a><i>,</i> <a href=\\\"https://github.com/birdsarah\\\"><i>Sarah Bird</i></a><i>,</i> <a href=\\\"https://github.com/groovecoder\\\"><i>Luke Crouch</i></a><i>,</i> <a href=\\\"https://mozillians.org/en-US/u/jason/\\\"><i>Jason Thomas</i></a></p><p><i>2017 student interns\\u200a\\u2014\\u200acrawler implementation and data collection:</i> <a href=\\\"https://github.com/ruizhiyou\\\"><i>Ruizhi You</i></a><i>,</i> <a href=\\\"https://github.com/ZigguratOfUr\\\"><i>Louis Belleville</i></a><i>,</i> <a href=\\\"https://github.com/calvinluo\\\"><i>Calvin Luo</i></a><i>,</i> <a href=\\\"https://github.com/TTThoma\\\"><i>Zejun (Thomas) Yu</i></a></p><p><i>2018 student interns\\u200a\\u2014\\u200aexploratory data analysis projects:</i> <a href=\\\"https://www.github.com/vvnjin\\\"><i>Vivian Jin</i></a><i>,</i> <a href=\\\"https://www.github.com/Tyler-R\\\"><i>Tyler Rubenuik</i></a><i>,</i> <a href=\\\"https://www.github.com/koosoku\\\"><i>Kyle Kung</i></a><i>,</i> <a href=\\\"https://www.github.com/Alexander1994\\\"><i>Alex McCallum</i></a></p><p>As champions of a <a href=\\\"https://www.mozilla.org/en-US/internet-health/\\\">healthy Internet</a>, we at Mozilla have been increasingly concerned about the current advertisement-centric web content ecosystem. Web-based ad technologies continue to evolve increasingly sophisticated <a href=\\\"https://arxiv.org/abs/1701.07058\\\">programmatic models</a> for targeting individuals based on their demographic characteristics and interests. The financial underpinnings of the current system incentivise optimizing on <i>engagement</i> above all else. This, in turn, has evolved an insatiable appetite for data among advertisers aggressively iterating on models to drive human clicks.</p><blockquote><i>Most of the content, products, and services we use online, whether provided by media organisations or by technology companies, are funded in whole or in part by advertising and various forms of marketing.</i><br/> \\u2013Timothy Libert and Rasmus Kleis Nielsen [<a href=\\\"https://timlibert.me/pdf/Libert_Nielsen-2018-Third_Party_Content_EU_News_GDPR.pdf\\\">link</a>]</blockquote><p>We\\u2019ve talked about the potentially adverse effects on the <a href=\\\"https://medium.com/firefox-context-graph/are-trackers-the-new-backbone-of-the-web-fb800435da15\\\">Web\\u2019s morphology</a> and how content silos can <a href=\\\"https://medium.com/firefox-context-graph/context-graph-its-time-to-bring-context-back-to-the-web-a7542fe45cf3\\\">impede a diversity of viewpoints</a>. Now, the Mozilla Systems Research Group is raising a call to action. <a href=\\\"https://github.com/mozilla/overscripted\\\">Help us</a> search for patterns that describe, expose, and illuminate the complex interactions between people and pages!</p><p>Inspired by the <a href=\\\"https://webtransparency.cs.princeton.edu/webcensus/\\\">Web Census</a> recently published by <a href=\\\"https://senglehardt.com/\\\">Steven Englehardt</a> and <a href=\\\"http://randomwalker.info/\\\">Arvind Narayanan</a> of Princeton University, we adapted the <a href=\\\"https://github.com/citp/OpenWPM\\\">OpenWPM</a> crawler framework to perform a comparable crawl gathering a rich set of information about the JavaScript execution on various websites. This enables us to delve into further analysis of web tracking, as well as a general exploration of client-page interactions and a survey of different APIs employed on the modern Web.</p><p>In short, we set out to explore the unseen or otherwise not obvious series of JavaScript execution events that are triggered once a user visits a webpage, and all the first- and third-party events that are set in motion when people retrieve content. To help enable more exploration and analysis, we are providing our <a href=\\\"https://github.com/mozilla/overscripted\\\">full set of data about JavaScript executions</a> open source.</p><p>The following sections will introduce the data set, how it was collected and the decisions made along the way. We\\u2019ll share examples of insights we\\u2019ve discovered and we\\u2019ll provide information on how to participate in the associated <a href=\\\"https://challenges.mozilla.community/overscripted/\\\">\\u201cOverscripted Web: A Mozilla Data Analysis Challenge\\u201d</a>, which we\\u2019ve <a href=\\\"https://medium.com/mozilla-open-innovation/overscripted-91881d8662c3\\\">launched today</a> with Mozilla\\u2019s Open Innovation Team.</p><h2>The Dataset</h2><p>In October 2017, several Mozilla staff and a group of Canadian undergraduate students <a href=\\\"https://help.github.com/articles/fork-a-repo/\\\">forked</a> the <a href=\\\"https://github.com/citp/OpenWPM\\\">OpenWPM</a> crawler repository to begin tinkering, in order to collect a plethora of information about the unseen interactions between modern websites and the Firefox web browser.</p><h3>Preparing the seed list</h3><p>The <a href=\\\"https://github.com/RuizhiYou/URLCrawler/blob/master/intersect_url.csv\\\">master list of pages</a> we crawled in preparing the dataset was itself generated from a preliminary shallow crawl we performed in November 2017. We ran a <a href=\\\"https://en.wikipedia.org/wiki/Web_crawler#Selection_policy\\\">depth-1 crawl</a>, seeded by <a href=\\\"https://www.alexa.com/topsites\\\">Alexa\\u2019s top 10,000 site list</a>, using 4 different machines at 4 different IP addresses (all in residential non-Amazon IP addresses served by Canadian internet service providers). The crawl was implemented using the <a href=\\\"http://docs.python-requests.org/en/master/\\\">Requests</a> Python library and collected no information except for an indication of successful page loads.</p><p>Of the 2,150,251 pages represented in the union of the 4 parallel shallow crawls, we opted to use the intersection of the four lists in order to prune out dynamically generated (e.g. personalized) outbound links that varied between them. This meant a reduction to 981,545 URLs, which formed the seed list for our main OpenWPM crawl.</p><h3>The Main Collection</h3><p>The following workflow describes (at a high level) the collection of page information contained in this dataset.</p><ol><li>Alexa top 10k (10,000 high traffic pages as of November 1st, 2017)</li><li>Precrawl using the python <i>Requests</i> library, visits each one of those pages<br/><ol><li>Request library requests that page</li><li>That page sends a response</li><li>All href tags in the response are captured to a depth of 1 (away from Alexa page)<br/><ol><li>For each of those href tags all valid pages (starts with \\u201chttp\\u201d) are added to the link set.</li><li>The link set union (2,150,251) was examined using the request library in parallel, which gives us the intersection list of 981,545.</li><li>The set of urls in the list 981,545 is passed to the deeper crawl for JavaScript analysis in a parallelized form.</li></ol></li></ol></li><li>Each of these pages was sent to our adapted version of OpenWPM to have the execution of JavaScript recorded for 10 seconds.</li><li>The <code>window.location</code> was hashed as the unique identifier of the location where the JavaScript was executed (to ensure unique source attribution).<br/><ol><li>When OpenWPM hits content that is inside an iFrame, the location of the content is reported.</li><li>Since we use the <code>window.location</code> to determine the location element of the content, each time an iFrame is encountered, that location can be split into the parent location of the page and the iFrame location.</li><li>Data collection and aggregation performed through a websocket associates all the activity linked to a location hash for compilation of the crawl dataset.</li></ol></li></ol><p>Interestingly, for the Alexa top 10,000 sites, our depth-1 crawl yielded properties hosted on 41,166 TLDs across the union of our 4 replicates, whereas only 34,809 unique TLDs remain among the 981,545 pages belonging to their intersection.</p><p>A <a href=\\\"https://github.com/RuizhiYou/OpenWPM/tree/RunThis\\\">modified version of OpenWPM</a> was used to record JavaScript calls potentially used for browsers tracking data from these pages. The collected JavaScript execution trace was written into an s3 bucket for later aggregation and analysis. Several additional parameters were defined based on cursory ad hoc analyses.</p><p>For example, the minimum dwell time per page required to capture the majority of JavaScript activity was set as 10 seconds per page. This was based on a random sampling of the seed list URLs and showed a large variation in time until no new JavaScript was being executed (from no JavaScript, to what appeared to be an infinite loop of self-referential JavaScript calls). This dwell time was chosen to balance between capturing the majority of JavaScript activity on a majority of the pages and minimizing the time required to complete the full crawl.</p><p>Several of the probes instrumented in the <a href=\\\"https://github.com/groovecoder/data-leak\\\">Data Leak</a> repo were ported over to our hybrid crawler, including instrumentation to monitor JavaScript execution occuring inside an iFrame element (potentially hosted on a third-party domain). This would prove to provide much insight into the relationships between pages in the crawl data.</p><h2>Exploratory work</h2><p>In January 2018, we got to work analyzing the dataset we had created. After substantial data cleaning to work through the messiness of real world variation, we were left with a gigantic \\u00a0<a href=\\\"https://parquet.apache.org/\\\">Parquet</a> dataset (around 70GB) containing an immense diversity of potential insights. Three example analyses are summarized below. The most important finding is that we have only just scratched the surface of the insights this data may hold.</p><h3>Examining session replay activity</h3><p><a href=\\\"https://en.wikipedia.org/wiki/Session_replay\\\">Session replay</a> is a service that lets websites track users\\u2019 interactions with the page\\u2014from how they navigate the site, to their searches, to the input they provide. Think of it as a \\u201cvideo replay\\u201d of a user\\u2019s entire session on a webpage. Since some session replay providers may record personal information such as personal addresses, credit card information and passwords, this can present a significant risk to both privacy and security.</p><p>We explored the incidence of session replay usage, and a few associated features, across the pages in our crawl dataset. To identify potential session replay, we obtained the <a href=\\\"https://webtransparency.cs.princeton.edu/no_boundaries/session_replay_sites.html\\\">Princeton WebTAP project</a> list, containing 14 Alexa top-10,000 session replay providers, and checked for requests to script URLs belonging to the list.</p><p>Out of 6,064,923 distinct script references among page loads in our dataset, we found 95,570 (1.6%) were to session replay providers. This translated to 4,857 distinct domain names (netloc) making such requests, out of a total of 87,325, or 5.6%. Note that even if scripts belonging to session replay providers are being accessed, this does not necessarily mean that session replay functionality is being used on the site.</p><p>Given the set of pages making requests to session replay providers, we also looked into the consistency of SSL usage across these requests. Interestingly, the majority of such requests were made over HTTPS (75.7%), and 49.9% of the pages making these requests were accessed over HTTPS. Additionally, we found no pages accessed over HTTPS making requests to session replay scripts over HTTP, which was surprising but encouraging.</p><p>Finally, we examined the distribution of TLDs across sites making requests to session replay providers, and compared this to TLDs over the full dataset. We found that, along with .com, .ru accounted for a surprising proportion of sites accessing such scripts (around 33%), whereas .ru domain names made up only 3% of all pages crawled. This implies that 65.6% of .ru sites in our dataset were making requests to potential session replay provider scripts. However, this may be explained by the fact that Yandex is one of the primary session replay providers, and it offers a range of other analytics services of interest to Russian-language websites.</p><h3>Eval and dynamically created function calls</h3><p>JavaScript allows a function call to be dynamically created from a string with the <code>eval()</code> function or by creating a new <code>Function()</code> object. For example, this code will print hello twice:</p>\", \"id\": \"ae479318-461a-417f-a803-cf5bca6a62c7\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"js\", \"code\": \"eval(\\\"console.log('hello')\\\")\\r\\nvar my_func = new Function(\\\"console.log('hello')\\\")\\r\\nmy_func()\"}, \"id\": \"5f3c59bf-4bd7-4a98-a549-eba73a4110f7\"}, {\"type\": \"paragraph\", \"value\": \"<p>While dynamic function creation has its uses, it also opens up users to injection attacks, such as <a href=\\\"https://en.wikipedia.org/wiki/Cross-site_scripting\\\">cross-site scripting</a>, and can potentially be used to hide malicious code.</p><p>In order to understand how dynamic function creation is being used on the Web, we analyzed its prevalence, location, and distribution in our dataset. The analysis was initially performed on 10,000 randomly selected pages and validated against the entire dataset. In terms of prevalence, we found that 3.72% of overall function calls were created dynamically, and these originated from across 8.76% of the websites crawled in our dataset.</p><p>These results suggest that, while dynamic function creation is not used heavily, it is still common enough on the Web to be a potential concern. Looking at call frequency per page showed that, while some Web pages create all their function calls dynamically, the majority tend to have only 1 or 2 dynamically generated calls (which is generally 1-5% of all calls made by a page).</p><p>We also examined the extent of this practice among the scripts that are being called. We discovered that they belong to a relatively small subset of script hosts (at an average ratio of about 33 calls per URL), indicating that the same JavaScript files are being used by multiple webpages. Furthermore, around 40% of these are known trackers (identified using the <a href=\\\"https://github.com/disconnectme/disconnect-tracking-protection\\\">disconnectme entity list</a>), although only 33% are hosted on a different domain from the webpage that uses them. This suggests that web developers may not even know that they are using dynamically generated functions.</p><h3>Cryptojacking</h3><p>Cryptojacking refers to the unauthorized use of a user\\u2019s computer or mobile device to mine cryptocurrency. More and more websites are using browser-based cryptojacking scripts as cryptocurrencies rise in popularity. It is an easy way to generate revenue and a viable alternative to bloating a website with ads. An excellent contextualization of crypto-mining via client-side JavaScript execution can be found in the <a href=\\\"https://github.com/mozilla/UCOSP-winter-2018_TrackingTechnologies/blob/master/analyses/cryptojacking/cryptojacking_analysis.md\\\">unabridged cryptojacking analysis</a> prepared by Vivian Jin.</p><p>We investigated the prevalence of cryptojacking among the websites represented in our dataset. A list of potential cryptojacking hosts (212 sites total) was obtained from the <a href=\\\"https://github.com/hoshsadiq/adblock-nocoin-list/blob/master/hosts.txt\\\">adblock-nocoin-list GitHub repo</a>. For each script call initiated on a page visit event, we checked whether the script host belonged to the list. Among 6,069,243 distinct script references on page loads in our dataset, only 945 (0.015%) were identified as cryptojacking hosts. Over half of these belonged to CoinHive, the original script developer. Only one use of AuthedMine was found. Viewed in terms of domains reached in the crawl, we found calls to cryptojacking scripts being made from 49 out of 29,483 distinct domains (0.16%).</p><p>However, it is important to note that cryptojacking code can be executed in other ways than by including the host script in a script tag. It can be disguised, stealthily executed in an iframe, or directly used in a function of a first-party script. Users may also face redirect loops that eventually lead to a page with a mining script. The low detection rate could also be due to the popularity of the sites covered by the crawl, which might \\u00a0dissuade site owners from implementing obvious cryptojacking scripts. It is likely that the actual rate of cryptojacking is higher.</p><p>The majority of the domains we found using cryptojacking are streaming sites. This is unsurprising, as users have streaming sites open for longer while they watch video content, and mining scripts can be executed longer. A Chinese variety site called 52pk.com accounted for 207 out of the overall 945 cryptojacking script calls we found in our analysis, by far the largest domain we observed for cryptojacking calls.</p><p>Another interesting fact: although our cryptojacking host list contained 212 candidates, we found only 11 of them to be active in our dataset, or about 5%.</p><h3>Limitations and future directions</h3><p>While this is a rich dataset allowing for a number of interesting analyses, it is limited in visibility mainly to behaviours that occur via JS API calls.</p><p>Another feature we investigated using our dataset is the presence of <a href=\\\"https://samy.pl/evercookie/\\\"><i>Evercookies</i></a>. <i>Evercookies</i> is a tracking tool used by websites to ensure that user data, such as a user ID, remains permanently stored on a computer. Evercookies persist in the browser by leveraging a series of tricks including Web API calls to a variety of available storage mechanisms. An initial attempt was made to search for evercookies in this data by searching for consistent values being passed to suspect Web API calls.</p><p>Acar et al., \\u201cThe Web Never Forgets: Persistent Tracking Mechanisms in the Wild\\u201d, (2014) <a href=\\\"https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf\\\">developed techniques</a> for looking at evercookies at scale. First, they proposed a mechanism to detect identifiers. They applied this mechanism to HTTP cookies but noted that it could also be applied to other storage mechanisms, although some modification would be required. For example, they look at cookie expiration, which would not be applicable in the case of localStorage. For this dataset we could try replicating their methodology for set calls to <code>window.document.cookie</code> and <code>window.localStorage</code>.</p><p>They also looked at Flash cookies respawning HTTP cookies and HTTP respawning Flash cookies. Our dataset contains no information on the presence of Flash cookies, so additional crawls would be required to obtain this information. In addition, they used multiple crawls to study Flash respawning, so we would have to replicate that procedure.</p><p>In addition to our lack of information on Flash cookies, we have no information about HTTP cookies, the first mechanism by which cookies are set. Knowing which HTTP cookies are initially set can serve as an important complement and validation for investigating other storage techniques then used for respawning and evercookies.</p><p>Beyond HTTP and Flash, Samy Kamkar\\u2019s <a href=\\\"https://samy.pl/evercookie/\\\">evercookie library</a> documents over a dozen mechanisms for storing an id to be used as an evercookie. Many of these are not detectable by our current dataset, e.g. HTTP Cookies, HSTS Pinning, Flask Cookies, Silverlight Storage, ETags, Web cache, Internet Explorer userData storage, etc. An evaluation of the prevalence of each technique would be a useful contribution to the literature. We also see the value of an ongoing repeated crawl to identify changes in prevalence and accounting for new techniques as they are discovered.</p><p>However, it is possible to continue analyzing the current dataset for some of the techniques described by Samy. For example, <code>window.name caching</code> is listed as a technique. We can look at this property in our dataset, perhaps by applying the same ID technique outlined by Acar et al., or perhaps by looking at sequences of calls.</p><h2>Conclusions</h2><p>Throughout our preliminary exploration of this data it became quickly apparent that the amount of superficial JavaScript execution on a Web page only tells part of the story. We have observed several examples of scripts running parallel to the content-serving functionality of webpages, these appear to fulfill a diversity of other functions. The analyses performed so far have led to some exciting discoveries, but so much more information remains hidden in the immense dataset available.</p><p>We are calling on any interested individuals to be part of the exploration. You\\u2019re invited to participate in the <a href=\\\"https://github.com/mozilla/overscripted\\\">Overscripted Web: A Mozilla Data Analysis Challenge</a> and help us better understand some of the hidden workings of the modern Web!</p><p><b>Note:</b> In the interest of being responsive to all interested contest participants and curious readers in one centralized location, we\\u2019ve closed comments on this post. We encourage you to bring relevant questions and discussion to the contest repo at: <a href=\\\"https://github.com/mozilla/overscripted\\\">https://github.com/mozilla/overscripted</a></p><h2>Acknowledgements</h2><p>Extra special thanks to Steven Englehardt for his contributions to the OpenWPM tool and advice throughout this project. We also thank Havi Hoffman for valuable editorial contributions to earlier versions of this post. Finally, thanks to Karen Reid of University of Toronto for coordinating the UCOSP program.</p>\", \"id\": \"959719e7-f9b0-4e6c-9af7-b15c1979d65b\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 29,
    "fields": {
      "description": "Tuesday\u2019s release of Firefox 67 brought a number of performance enhancing features that make this our fastest browser ever. \u00a0Among these is the high performance, royalty free AV1 video decoder dav1d, now enabled by default on all desktop platforms (Windows, OSX and Linux) for both 32-bit and 64-bit systems.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>With files more than 30% smaller than today\\u2019s most popular web codec VP9 [<a href=\\\"https://code.fb.com/video-engineering/av1-beats-x264-and-libvpx-vp9-in-practical-use-case/\\\">1</a>], and nearly 50% smaller than its widely deployed predecessor H.264 [<a href=\\\"http://www.compression.ru/video/codec_comparison/hevc_2018/pdf/MSU_HEVC_AV1_comparison_2018_P4_HQ_encoders.pdf\\\">2</a>], AV1 allows high-quality video experiences with a lot less network usage, and has the potential to transform how and where we watch video on the Internet. However, because AV1 is brand new and more sophisticated, some experts had <a href=\\\"https://www.multichannel.com/news/hardware-support-big-step-ahead-av1\\\">predicted</a> that market adoption would wait until 2020 when high-performance hardware decoders are expected. \\u00a0Dav1d in the browser upends these predictions.</p><p>Sponsored by the <a href=\\\"https://aomedia.org/\\\">Alliance for Open Media</a>, dav1d is a joint effort between the French non-profit VideoLAN and the greater FFmpeg open source audio/video community. \\u00a0Some of the leading minds in open source multimedia joined forces to release the <a href=\\\"http://www.jbkempf.com/blog/post/2018/First-release-of-dav1d\\\">first</a> version of dav1d last fall, already 2x to 5x faster than <a href=\\\"https://aomedia.googlesource.com/aom/\\\">libaom</a>, the reference decoder published by AOMedia as part of the AV1 standards effort.</p>\", \"id\": \"97196082-a36e-4e47-a29d-906454eda48f\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 30,
    "fields": {
      "description": "AV1, the next generation royalty-free video codec from the Alliance for Open Media, is making waves in the broadcasting industry.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>Since <a href=\\\"https://aomedia.org/\\\">AOMedia</a> officially cemented the AV1 v1.0.0 specification earlier this year, we\\u2019ve seen increasing interest from the broadcasting industry. Starting with the NAB Show (National Association of Broadcasters) in Las Vegas earlier this year, and gaining momentum through IBC (International Broadcasting Convention) in Amsterdam, and more recently the NAB East Show in New York, AV1 keeps picking up steam. Each of these industry events attract over 100,000 media professionals. Mozilla attended these shows to demonstrate AV1 playback in Firefox, and showed that AV1 is well on its way to being broadly adopted in web browsers.</p>\", \"id\": \"a062b3bc-c577-4d11-8c88-941bd7cf8001\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 31,
    "fields": {
      "description": "We just released Firefox 65 with a number of new developer features that make it even easier for you to create, inspect and debug the web.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>Among all the features and bug fixes that made it to DevTools in this new release, we want to highlight two in particular:</p><ul><li>Our brand new Flexbox Inspector</li><li>Smarter JavaScript inspection and debugging</li></ul><p>We hope you\\u2019ll love using these tools just as much as we and our community loved creating them.</p><h2>Understand CSS layout like never before</h2><p>The Firefox DevTools team is on a mission to help you master CSS layout. We want you to go from \\u201ctrying things until they work\\u201d to really understanding how your browser lays out a page.</p><h3>Introducing the Flexbox Inspector</h3><p>Flexbox is a powerful way to organize and distribute elements on a page, in a flexible way.</p><p>To achieve this, the layout engine of the browser does a lot of things under the hood. When everything works like a charm, you don\\u2019t have to worry about this. But when problems appear in your layout it may feel frustrating, and you may really need to understand why elements behave a certain way.</p><p>That\\u2019s exactly what the <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_Flexbox_layouts\\\">Flexbox Inspector</a> is focused on.</p><h3>Highlighting containers, lines, and items</h3><p>First and foremost, the Flexbox Inspector highlights the elements that make up your flexbox layout: the container, lines and items.</p><p>Being able to see where these start and end \\u2014 and how far apart they are \\u2014 will go a long way to helping you understand what\\u2019s going on.</p>\", \"id\": \"a6063f6f-8b60-4a3b-8b0e-37245d503d34\"}, {\"type\": \"paragraph\", \"value\": \"<p>Once toggled, the highlighter shows three main parts:</p><ul><li>A dotted outline that highlights the flex container itself</li><li>Solid lines that show where the flex items are</li><li>A background pattern that represents the free space between items</li></ul><p>One way to toggle the highlighter for a flexbox container is by clicking its \\u201cflex\\u201d badge in the inspector. \\u00a0This is an easy way to find flex containers while you\\u2019re scanning elements in the DOM. Additionally, you can turn on the highlighter from the flex icon in the CSS rules panel, as well as from the toggle in the new Flexbox section of the layout sidebar.</p>\", \"id\": \"ce3732bc-2e9f-44f8-a2bd-f2b21980b365\"}, {\"type\": \"paragraph\", \"value\": \"<h3>Understanding how flex items got their size</h3><p>The beauty of Flexbox is that you can leave the browser in charge of making the right layout decisions for you. How much should an element stretch, or should an element wrap to a new line?</p><p>But when you give up control, how do you know what the browser is actually doing?</p><p>The Flexbox Inspector comes with functionality to show how the browser distributed the sizing for a given item.</p>\", \"id\": \"2ddfb678-6acc-4118-be88-f131292bfb5b\"}, {\"type\": \"paragraph\", \"value\": \"<p>The layout sidebar now contains a <b>Flex Container</b> section that lists all the flex items, in addition to providing information about the container itself.</p><p>Clicking any of these flex items opens the <b>Flex Item</b> section that displays exactly how the browser calculated the item size.</p>\", \"id\": \"36824081-0049-431d-9fa7-fd95892f1b87\"}, {\"type\": \"paragraph\", \"value\": \"<p>The diagram at the top of the flexbox section shows a quick overview of the steps the browser took to give the item its size.</p><p>It shows your item\\u2019s base size (either its minimum content size or its <code>flex-basis</code> size), the amount of flexible space that was added (<code>flex-grow</code>) or removed (<code>flex-shrink</code>) from it, and any minimum or maximum defined sizes that restricted the item from becoming any shorter or longer.</p><p><i>If you are reading this on</i> <a href=\\\"https://www.mozilla.org/en-US/firefox/\\\"><b><i>Firefox 65</i></b></a><i>, you can take this for a spin right now!</i></p><p>Open the <b>Inspector</b> on this page, and select the <code>div.masthead.row</code> element. Look for the <b>Flex Container</b> panel in the sidebar, and click on the 2 items to see how their sizes are computed by the browser.</p>\", \"id\": \"68e64b4c-85f7-45b9-ade3-2cd9b60dc2ae\"}, {\"type\": \"paragraph\", \"value\": \"<h3>After the bug fix, keep track of changes</h3><p>Let\\u2019s suppose you have fixed a flexbox bug thanks to the Flexbox Inspector. To do so, you\\u2019ve made a few edits to various CSS rules and elements. That\\u2019s when you\\u2019re usually faced with a problem we\\u2019ve all had: \\u201cWhat did I actually change to make it work?\\u201d.</p><p>In Firefox 65, we\\u2019ve also introduced a new <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#Track_changes\\\">Changes panel</a> to do just that.</p>\", \"id\": \"353cf4fd-0ead-430f-87d9-540671472ac1\"}, {\"type\": \"paragraph\", \"value\": \"<p>It keeps track of all the CSS changes you\\u2019ve made within the inspector, so you can keep working as you normally would. Once you\\u2019re happy, open the <b>Changes</b> tab and see everything you did.</p><h3>What\\u2019s next for layout tools?</h3><p>We\\u2019re really excited for you to try these two new features and let us know <a href=\\\"https://hacks.mozilla.org/2019/01/new-in-firefox-devtools-65/#contribute\\\">what you think</a>. But there\\u2019s more in store.</p><p>You\\u2019ve been <a href=\\\"https://hacks.mozilla.org/2018/11/new-experimental-web-design-tools-feedback-requested/\\\">telling us exactly</a> what your biggest CSS challenges are, and we\\u2019ve been listening. We\\u2019re currently prototyping layout tools for debugging unwanted scrollbars, z-indexes that don\\u2019t work, and more tools like the Flexbox Inspector but for other types of layouts. Also, we\\u2019re going to make it even easier for you to extract your changes from the Changes panel.</p><h2>Smarter JavaScript inspection &amp; debugging</h2><p>When developing JavaScript, the Console and Debugger are your windows into your code\\u2019s execution flow and state changes. Over the past releases we\\u2019ve focused on making debugging work better for modern toolchains. Firefox 65 continues this theme.</p><h3>Collapsing Framework Stack Traces</h3><p>If you\\u2019re working with frameworks and build tools, then you\\u2019re used to seeing really long error stack traces in the Console. The new smarter stack traces identify 3rd party code (such as frameworks) and collapse it by default. This significantly reduces the information displayed in the <b>Console</b> and lets you focus on <i>your</i> code.</p>\", \"id\": \"42529f5e-90c7-4a91-a5fc-9483153ab98d\"}, {\"type\": \"paragraph\", \"value\": \"<p>The <b>Collapsing</b> feature works in the Console stack traces for errors and logs, and in the Debugger call stacks.</p><h3>Reverse search your Console history</h3><p>If you are tired of smashing the arrow key to find that awesome one-liner you ran one hour ago in the console, then this is for you. Reverse search is a well known command-line feature that lets you quickly browse recent commands that match the entered string.</p>\", \"id\": \"43e09ee4-64f4-4018-8264-83a2e531a914\"}, {\"type\": \"paragraph\", \"value\": \"<p>To use it in the Console, press <i>F9</i> on Windows/Linux or <i>Ctrl+R</i> on MacOS and start typing. You can then use <i>Ctrl+R</i> to move to the previous or <i>Ctrl+S</i> to the next result. Finally, hit return to confirm.</p><h3>Invoke getters to inspect the return value</h3><p>JavaScript <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\\\">getters</a> are very useful for dynamic properties and heavily used in frameworks like <a href=\\\"https://vuejs.org/v2/guide/computed.html\\\">vue.js</a> for computed properties. But when you log an object with a getter to the Console, the reference to the method is logged, not its return value. The method does not get invoked automatically, as that could change your application\\u2019s state. Since you often actually want to see the value, you can now manually invoke getters on logged objects.</p>\", \"id\": \"c0894668-4f9f-4bc3-928a-c9d9d45db2f5\"}, {\"type\": \"paragraph\", \"value\": \"<p>Wherever objects can be inspected, in the Console or Debugger, you\\u2019ll see <code>&gt;&gt;</code> icons next to getters. Clicking these will execute the method and print the return value.</p><h3>Pause on XHR/Fetch Breakpoints</h3><p>Console logging is just one aspect of understanding application state. For complex issues, you need to pause state at precisely the right moment. Fetching data is usually one of those moments, and it is now made \\u201cpausable\\u201d with the new XHR/Fetch Breakpoint in the Debugger.</p>\", \"id\": \"0dde7228-9ca9-4f32-8875-4c4cb0e4388b\"}, {\"type\": \"paragraph\", \"value\": \"<p>Kudos to Firefox DevTools code contributor <a href=\\\"https://github.com/AnshulMalik\\\">Anshul Malik</a> for <a href=\\\"https://github.com/firefox-devtools/debugger.html/pull/6934#issuecomment-419260053\\\">\\u201ccasually\\u201d submitting</a> the patch for this useful feature and for his ongoing contributions.</p><h3>What\\u2019s next for JavaScript debugging?</h3><p>You might have noticed that we\\u2019ve been heads down over recent releases to make the JavaScript debugging experience rock solid \\u2013 for breakpoints, stepping, source maps, performance, etc. Raising the quality bar and continuing to polish and refine remains the focus for the entire team.</p><p>There\\u2019s work in progress on much requested features like <b>Column Breakpoints</b>, <b>Logpoints</b>, <b>Event</b> and <b>DOM Breakpoints</b>. Building out the authoring experience in the Console, we are adding an multi-line editing mode (inspired by <a href=\\\"https://hacks.mozilla.org/2017/10/saying-goodbye-to-firebug/\\\">Firebug</a>) and a more powerful autocomplete. Keep an eye out for those features in the latest release of <a href=\\\"https://www.mozilla.org/en-US/firefox/developer/\\\">Firefox Developer Edition</a>.</p><h2>Thank you</h2><p>Countless contributors helped DevTools staff by filing bugs, writing patches and verifying them. Special thanks go to:</p><ul><li><a href=\\\"https://github.com/zamhaq\\\">Zameer Haque</a>: <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1495971\\\">Improved contrast</a> for resource status in the Console.</li><li><a href=\\\"https://github.com/tanhengyeow\\\">Heng Yeow</a>: <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1496742\\\">Added</a> the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\\\">Referrer-Policy to</a> the resource <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/request_details#Network_request_details\\\">Headers</a> list in the Network panel (and <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1340100\\\">fixed</a> <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1501674\\\">other</a> <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1459539\\\">bugs</a>).</li><li><a href=\\\"https://github.com/ash-tamraz\\\">Adam Holm</a>: <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=1340100\\\">Updated</a> the design for the <a href=\\\"https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/request_list#Edit_and_Resend\\\">Edit &amp; Resend</a> dialog in the Network panel.</li><li><a href=\\\"https://bugzilla.mozilla.org/user_profile?user_id=613727\\\">Ariel Burone</a>: <a href=\\\"https://bugzilla.mozilla.org/show_bug.cgi?id=862851\\\">Swapped</a> the Domain and File column in the Network panel.</li></ul><p>Also, thanks to <a href=\\\"https://twitter.com/patrickbrosset\\\">Patrick Brosset</a>, <a href=\\\"https://twitter.com/nicolaschevobbe/\\\">Nicolas Chevobbe</a> and the whole DevTools team &amp; friends for helping put together this article.</p><h2>Contribute</h2><p>As always, we would love to hear your feedback on how we can improve DevTools and the browser.</p><ul><li>File bug reports in <a href=\\\"https://bugzilla.mozilla.org/enter_bug.cgi?product=DevTools&amp;component=General\\\">Bugzilla</a></li><li>Chat with us in the <a href=\\\"https://devtools-html-slack.herokuapp.com/\\\">Firefox DevTools Slack</a></li><li>Share ideas and questions in Mozilla\\u2019s <a href=\\\"https://discourse.mozilla.org/c/devtools\\\">Developer Tools Discourse</a></li><li>Tweet us at <a href=\\\"https://twitter.com/FirefoxDevTools\\\">@FirefoxDevTools</a></li></ul><p>Download <a href=\\\"https://www.mozilla.org/en-US/firefox/developer/\\\">Firefox Developer Edition</a> to get early access to upcoming tooling and platform.</p>\", \"id\": \"db6084ab-d3be-4186-9223-68666d08e20a\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.article",
    "pk": 32,
    "fields": {
      "description": "The subgrid feature of the CSS Grid Specification is not yet shipping in any browser, but is now available for testing in Firefox Nightly. This is a feature that, if you have used CSS Grid for a layout of any complexity, you are likely to be pretty excited about. In this article I\u2019m going to introduce the feature and some of the use cases it solves.",
      "image": null,
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>So what is subgrid exactly? In terms of syntax, it is a new keyword value for the <code>grid-template-columns</code> and <code>grid-template-rows</code> properties. These properties normally accept a track listing, or to put it another way, a listing of sizes of the tracks you want in your grid. For example, the following CSS would create a three column track grid with a 200px column, a column sized as <code>max-content</code>, and a final <code>1fr</code> column.</p>\", \"id\": \"19e0445b-965d-4cf0-a6e9-693033c1c71c\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"css\", \"code\": \"grid-template-columns: 200px max-content 1fr;\"}, \"id\": \"28d28b89-994c-4299-bde9-38498ebc15d2\"}, {\"type\": \"paragraph\", \"value\": \"<p>You can find out more about track sizing in general, and the basics of grid layout via the MDN Guide <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\\\">Basic concepts of Grid Layout</a>.</p><p>If we define a track as a subgrid, however, we replace the track listing with the keyword subgrid.</p>\", \"id\": \"77d03742-d6c0-41a3-8e6c-ebb804d0cc38\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"css\", \"code\": \"grid-template-columns: subgrid;\"}, \"id\": \"333fbd76-82cb-43de-a45b-67d8ec7904b7\"}, {\"type\": \"paragraph\", \"value\": \"<p>This instructs the <code>grid-template-columns</code> property to use the tracks defined on the parent as the track sizing and number used by this nested grid.</p><p>In the example below I have an element which is a grid container. It contains three child elements \\u2014 two <code>&lt;div&gt;</code> elements and a <code>&lt;ul&gt;</code>.</p>\", \"id\": \"985c47e5-db6e-4ce5-b37e-0f68aff9adab\"}, {\"type\": \"code_snippet\", \"value\": {\"language\": \"html\", \"code\": \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"box1\\\">A</div>\\r\\n  <div class=\\\"box2\\\">B</div>\\r\\n  <ul class=\\\"box3\\\">\\r\\n    <li>List item 1</li>\\r\\n    <li>List item 2</li>\\r\\n    <li>List item 3</li>\\r\\n  </ul>\\r\\n</div>\"}, \"id\": \"93383a73-3603-4037-a1ab-0f74ca34205f\"}]",
      "related_links": "[]",
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "date": "2019-01-01",
      "authors": "[]"
    }
  },
  {
    "model": "articles.articles",
    "pk": 4,
    "fields": {
      "description": ""
    }
  },
  {
    "model": "wagtailcore.site",
    "pk": 2,
    "fields": {
      "hostname": "developer-portal-127-0-0-1.nip.io",
      "port": 433,
      "site_name": "Mozilla Developer",
      "root_page": 3,
      "is_default_site": true
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 1,
    "fields": {
      "path": "0001",
      "depth": 1,
      "numchild": 1,
      "title": "Root",
      "draft_title": "Root",
      "slug": "root",
      "content_type": [
        "wagtailcore",
        "page"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 3,
    "fields": {
      "path": "00010001",
      "depth": 2,
      "numchild": 4,
      "title": "Home",
      "draft_title": "Home",
      "slug": "home",
      "content_type": [
        "home",
        "homepage"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 4,
    "fields": {
      "path": "000100010003",
      "depth": 3,
      "numchild": 22,
      "title": "Posts",
      "draft_title": "Posts",
      "slug": "posts",
      "content_type": [
        "articles",
        "articles"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 5,
    "fields": {
      "path": "000100010002",
      "depth": 3,
      "numchild": 2,
      "title": "Products & Technologies",
      "draft_title": "Products & Technologies",
      "slug": "topics",
      "content_type": [
        "topics",
        "topics"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/topics/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 6,
    "fields": {
      "path": "0001000100020001",
      "depth": 4,
      "numchild": 0,
      "title": "CSS",
      "draft_title": "CSS",
      "slug": "css",
      "content_type": [
        "topics",
        "topic"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/topics/css/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 7,
    "fields": {
      "path": "0001000100020002",
      "depth": 4,
      "numchild": 0,
      "title": "JavaScript",
      "draft_title": "JavaScript",
      "slug": "javascript",
      "content_type": [
        "topics",
        "topic"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/topics/javascript/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 8,
    "fields": {
      "path": "0001000100030001",
      "depth": 4,
      "numchild": 0,
      "title": "Faster smarter JavaScript debugging in Firefox DevTools",
      "draft_title": "Faster smarter JavaScript debugging in Firefox DevTools",
      "slug": "faster-smarter-javascript-debugging-in-firefox",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/faster-smarter-javascript-debugging-in-firefox/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 9,
    "fields": {
      "path": "0001000100060001",
      "depth": 4,
      "numchild": 1,
      "title": "People",
      "draft_title": "People",
      "slug": "people",
      "content_type": [
        "people",
        "people"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/communities/people/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 11,
    "fields": {
      "path": "00010001000600010001",
      "depth": 5,
      "numchild": 0,
      "title": "Josh Marinacci",
      "draft_title": "Josh Marinacci",
      "slug": "josh-marinacci",
      "content_type": [
        "people",
        "person"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/communities/people/josh-marinacci/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 12,
    "fields": {
      "path": "0001000100030002",
      "depth": 4,
      "numchild": 0,
      "title": "Developer Roadshow 2019 returns with VR, IoT and all things web",
      "draft_title": "Developer Roadshow 2019 returns with VR, IoT and all things web",
      "slug": "developer-roadshow-2019-returns-vr-iot-and-all-things-web",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/developer-roadshow-2019-returns-vr-iot-and-all-things-web/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 13,
    "fields": {
      "path": "0001000100030003",
      "depth": 4,
      "numchild": 0,
      "title": "Standardizing WASI: A system interface to run WebAssembly outside the web",
      "draft_title": "Standardizing WASI: A system interface to run WebAssembly outside the web",
      "slug": "standardizing-wasi-system-interface-run-webassembly-outside-web",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/standardizing-wasi-system-interface-run-webassembly-outside-web/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 14,
    "fields": {
      "path": "0001000100030004",
      "depth": 4,
      "numchild": 0,
      "title": "Firefox 66: The Sound of Silence",
      "draft_title": "Firefox 66: The Sound of Silence",
      "slug": "firefox-66-sound-silence",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/firefox-66-sound-silence/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 15,
    "fields": {
      "path": "0001000100030005",
      "depth": 4,
      "numchild": 0,
      "title": "Fearless Security: Thread Safety",
      "draft_title": "Fearless Security: Thread Safety",
      "slug": "fearless-security-thread-safety",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/fearless-security-thread-safety/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 16,
    "fields": {
      "path": "0001000100030006",
      "depth": 4,
      "numchild": 0,
      "title": "How to make VR with the web, a new video series",
      "draft_title": "How to make VR with the web, a new video series",
      "slug": "how-make-vr-web-new-video-series",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/how-make-vr-web-new-video-series/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 17,
    "fields": {
      "path": "0001000100030007",
      "depth": 4,
      "numchild": 0,
      "title": "Firefox 67: Dark Mode CSS, WebRender, and more",
      "draft_title": "Firefox 67: Dark Mode CSS, WebRender, and more",
      "slug": "firefox-67-dark-mode-css-webrender-and-more",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/firefox-67-dark-mode-css-webrender-and-more/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 18,
    "fields": {
      "path": "0001000100030008",
      "depth": 4,
      "numchild": 0,
      "title": "Web Design Survey Findings and Next Steps",
      "draft_title": "Web Design Survey Findings and Next Steps",
      "slug": "web-design-survey-findings-and-next-steps",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/web-design-survey-findings-and-next-steps/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 19,
    "fields": {
      "path": "0001000100030009",
      "depth": 4,
      "numchild": 0,
      "title": "9 Biggest Mistakes with CSS Grid",
      "draft_title": "9 Biggest Mistakes with CSS Grid",
      "slug": "9-biggest-mistakes-css-grid",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/9-biggest-mistakes-css-grid/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 20,
    "fields": {
      "path": "000100010003000A",
      "depth": 4,
      "numchild": 0,
      "title": "Technical Details on the Recent Firefox Add-on Outage",
      "draft_title": "Technical Details on the Recent Firefox Add-on Outage",
      "slug": "technical-details-recent-firefox-add-outage",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/technical-details-recent-firefox-add-outage/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 21,
    "fields": {
      "path": "000100010003000B",
      "depth": 4,
      "numchild": 0,
      "title": "Scroll Anchoring in Firefox 66",
      "draft_title": "Scroll Anchoring in Firefox 66",
      "slug": "scroll-anchoring-firefox-66",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/scroll-anchoring-firefox-66/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 22,
    "fields": {
      "path": "000100010003000C",
      "depth": 4,
      "numchild": 0,
      "title": "JavaScript and evidence-based language design",
      "draft_title": "JavaScript and evidence-based language design",
      "slug": "javascript-and-evidence-based-language-design",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/javascript-and-evidence-based-language-design/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 23,
    "fields": {
      "path": "000100010003000D",
      "depth": 4,
      "numchild": 0,
      "title": "Calls between JavaScript and WebAssembly are finally fast",
      "draft_title": "Calls between JavaScript and WebAssembly are finally fast",
      "slug": "calls-between-javascript-and-webassembly-are-finally-fast",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/calls-between-javascript-and-webassembly-are-finally-fast/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 24,
    "fields": {
      "path": "000100010003000E",
      "depth": 4,
      "numchild": 0,
      "title": "ES6 In Depth: Iterators and the for-of loop",
      "draft_title": "ES6 In Depth: Iterators and the for-of loop",
      "slug": "es6-depth-iterators-and-loop",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/es6-depth-iterators-and-loop/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 25,
    "fields": {
      "path": "000100010003000F",
      "depth": 4,
      "numchild": 0,
      "title": "ES6 In Depth: Destructuring",
      "draft_title": "ES6 In Depth: Destructuring",
      "slug": "es6-depth-destructuring",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/es6-depth-destructuring/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 26,
    "fields": {
      "path": "000100010003000G",
      "depth": 4,
      "numchild": 0,
      "title": "Indicating focus to improve accessibility",
      "draft_title": "Indicating focus to improve accessibility",
      "slug": "indicating-focus-improve-accessibility",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/indicating-focus-improve-accessibility/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 27,
    "fields": {
      "path": "000100010003000H",
      "depth": 4,
      "numchild": 0,
      "title": "Fluent 1.0: a localization system for natural-sounding translations",
      "draft_title": "Fluent 1.0: a localization system for natural-sounding translations",
      "slug": "fluent-10-localization-system-natural-sounding-translations",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/fluent-10-localization-system-natural-sounding-translations/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 28,
    "fields": {
      "path": "000100010003000I",
      "depth": 4,
      "numchild": 0,
      "title": "Overscripted! Digging into JavaScript execution at scale",
      "draft_title": "Overscripted! Digging into JavaScript execution at scale",
      "slug": "overscripted-digging-javascript-execution-scale",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/overscripted-digging-javascript-execution-scale/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 29,
    "fields": {
      "path": "000100010003000J",
      "depth": 4,
      "numchild": 0,
      "title": "Firefox brings you smooth video playback with the world\u2019s fastest AV1 decoder",
      "draft_title": "Firefox brings you smooth video playback with the world\u2019s fastest AV1 decoder",
      "slug": "firefox-brings-you-smooth-video-playback-with-the-worlds-fastest-av1-decoder",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/firefox-brings-you-smooth-video-playback-with-the-worlds-fastest-av1-decoder/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 30,
    "fields": {
      "path": "000100010003000K",
      "depth": 4,
      "numchild": 0,
      "title": "Into the Depths: The Technical Details Behind AV1",
      "draft_title": "Into the Depths: The Technical Details Behind AV1",
      "slug": "depths-technical-details-behind-av1",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/depths-technical-details-behind-av1/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 31,
    "fields": {
      "path": "000100010003000L",
      "depth": 4,
      "numchild": 0,
      "title": "New in Firefox DevTools 65",
      "draft_title": "New in Firefox DevTools 65",
      "slug": "new-firefox-devtools-65",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/new-firefox-devtools-65/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 32,
    "fields": {
      "path": "000100010003000M",
      "depth": 4,
      "numchild": 0,
      "title": "CSS Grid Level 2 \u2013 subgrid is coming to Firefox",
      "draft_title": "CSS Grid Level 2 \u2013 subgrid is coming to Firefox",
      "slug": "css-grid-level-2-subgrid-is-coming-to-firefox",
      "content_type": [
        "articles",
        "article"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/posts/css-grid-level-2-subgrid-is-coming-to-firefox/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 33,
    "fields": {
      "path": "000100010004",
      "depth": 3,
      "numchild": 0,
      "title": "Events",
      "draft_title": "Events",
      "slug": "events",
      "content_type": [
        "events",
        "events"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/events/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 35,
    "fields": {
      "path": "000100010006",
      "depth": 3,
      "numchild": 1,
      "title": "Communities",
      "draft_title": "Communities",
      "slug": "communities",
      "content_type": [
        "content",
        "contentpage"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/communities/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": true,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "wagtailcore.page",
    "pk": 36,
    "fields": {
      "path": "000100010007",
      "depth": 3,
      "numchild": 0,
      "title": "Videos",
      "draft_title": "Videos",
      "slug": "videos",
      "content_type": [
        "videos",
        "videos"
      ],
      "live": true,
      "has_unpublished_changes": false,
      "url_path": "/home/videos/",
      "owner": null,
      "seo_title": "",
      "show_in_menus": false,
      "search_description": "",
      "go_live_at": null,
      "expire_at": null,
      "expired": false,
      "locked": false,
      "first_published_at": null,
      "last_published_at": null,
      "latest_revision_created_at": null,
      "live_revision": null
    }
  },
  {
    "model": "videos.videos",
    "pk": 36,
    "fields": {}
  },
  {
    "model": "topics.topics",
    "pk": 5,
    "fields": {}
  },
  {
    "model": "topics.topic",
    "pk": 6,
    "fields": {
      "description": "",
      "featured": "[]",
      "tabbed_panels": "[]",
      "latest_articles_count": 3,
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "icon": "",
      "color": "blue-40"
    }
  },
  {
    "model": "topics.topic",
    "pk": 7,
    "fields": {
      "description": "",
      "featured": "[]",
      "tabbed_panels": "[]",
      "latest_articles_count": 3,
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "icon": "",
      "color": "blue-40"
    }
  },
  {
    "model": "people.person",
    "pk": 11,
    "fields": {
      "job_title": "Developer advocate",
      "role": "staff",
      "description": "I am Josh Marinacci: developer advocate, software engineer, researcher, usability expert, and general miscreant. I have a passion for great user experiences. I live in Oregon with my wife and kiddo. I&#x27;m currently helping to keep the Web open and free at Mozilla. I speak professionally at conferences world wide and have written many technical articles for publications like Java.net, the Java Magazine, and the Palm Developer Blog, and Embedded Computing. I have also published three books: Swing Hacks, Building Mobile Applications in Java, and HTML Canvas: A Travelogue. See more on my writings page.",
      "image": null,
      "card_title": "",
      "card_description": "",
      "card_image": null,
      "twitter": "",
      "facebook": "",
      "linkedin": "",
      "github": "",
      "email": "",
      "websites": "[]"
    }
  },
  {
    "model": "people.people",
    "pk": 9,
    "fields": {
      "description": ""
    }
  },
  {
    "model": "home.homepage",
    "pk": 3,
    "fields": {
      "subtitle": "",
      "button_text": "",
      "button_url": "",
      "image": null,
      "external_promos": "[]",
      "featured": "[]",
      "about_title": "",
      "about_subtitle": "",
      "about_button_text": "",
      "about_button_url": "",
      "card_title": "",
      "card_description": "",
      "card_image": null
    }
  },
  {
    "model": "events.events",
    "pk": 33,
    "fields": {
      "featured": "[]"
    }
  },
  {
    "model": "content.contentpage",
    "pk": 35,
    "fields": {
      "body": "[{\"type\": \"paragraph\", \"value\": \"<p>Lorem ipsum</p>\", \"id\": \"8aefce1b-e741-4fff-a0f1-67fc49a2cbc6\"}]",
      "card_title": "",
      "card_description": "",
      "card_image": null
    }
  }
  ]
